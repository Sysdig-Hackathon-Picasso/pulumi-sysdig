# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetFargateWorkloadAgentResult',
    'AwaitableGetFargateWorkloadAgentResult',
    'get_fargate_workload_agent',
    'get_fargate_workload_agent_output',
]

@pulumi.output_type
class GetFargateWorkloadAgentResult:
    """
    A collection of values returned by GetFargateWorkloadAgent.
    """
    def __init__(__self__, collector_host=None, collector_port=None, container_definitions=None, id=None, image_auth_secret=None, orchestrator_host=None, orchestrator_port=None, output_container_definitions=None, sysdig_access_key=None, workload_agent_image=None):
        if collector_host and not isinstance(collector_host, str):
            raise TypeError("Expected argument 'collector_host' to be a str")
        pulumi.set(__self__, "collector_host", collector_host)
        if collector_port and not isinstance(collector_port, str):
            raise TypeError("Expected argument 'collector_port' to be a str")
        pulumi.set(__self__, "collector_port", collector_port)
        if container_definitions and not isinstance(container_definitions, str):
            raise TypeError("Expected argument 'container_definitions' to be a str")
        pulumi.set(__self__, "container_definitions", container_definitions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_auth_secret and not isinstance(image_auth_secret, str):
            raise TypeError("Expected argument 'image_auth_secret' to be a str")
        pulumi.set(__self__, "image_auth_secret", image_auth_secret)
        if orchestrator_host and not isinstance(orchestrator_host, str):
            raise TypeError("Expected argument 'orchestrator_host' to be a str")
        pulumi.set(__self__, "orchestrator_host", orchestrator_host)
        if orchestrator_port and not isinstance(orchestrator_port, str):
            raise TypeError("Expected argument 'orchestrator_port' to be a str")
        pulumi.set(__self__, "orchestrator_port", orchestrator_port)
        if output_container_definitions and not isinstance(output_container_definitions, str):
            raise TypeError("Expected argument 'output_container_definitions' to be a str")
        pulumi.set(__self__, "output_container_definitions", output_container_definitions)
        if sysdig_access_key and not isinstance(sysdig_access_key, str):
            raise TypeError("Expected argument 'sysdig_access_key' to be a str")
        pulumi.set(__self__, "sysdig_access_key", sysdig_access_key)
        if workload_agent_image and not isinstance(workload_agent_image, str):
            raise TypeError("Expected argument 'workload_agent_image' to be a str")
        pulumi.set(__self__, "workload_agent_image", workload_agent_image)

    @property
    @pulumi.getter(name="collectorHost")
    def collector_host(self) -> Optional[str]:
        return pulumi.get(self, "collector_host")

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> Optional[str]:
        return pulumi.get(self, "collector_port")

    @property
    @pulumi.getter(name="containerDefinitions")
    def container_definitions(self) -> str:
        return pulumi.get(self, "container_definitions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageAuthSecret")
    def image_auth_secret(self) -> Optional[str]:
        return pulumi.get(self, "image_auth_secret")

    @property
    @pulumi.getter(name="orchestratorHost")
    def orchestrator_host(self) -> Optional[str]:
        return pulumi.get(self, "orchestrator_host")

    @property
    @pulumi.getter(name="orchestratorPort")
    def orchestrator_port(self) -> Optional[str]:
        return pulumi.get(self, "orchestrator_port")

    @property
    @pulumi.getter(name="outputContainerDefinitions")
    def output_container_definitions(self) -> str:
        """
        The updated container definitions instrumented with the Sysdig workload agent.
        """
        return pulumi.get(self, "output_container_definitions")

    @property
    @pulumi.getter(name="sysdigAccessKey")
    def sysdig_access_key(self) -> str:
        return pulumi.get(self, "sysdig_access_key")

    @property
    @pulumi.getter(name="workloadAgentImage")
    def workload_agent_image(self) -> str:
        return pulumi.get(self, "workload_agent_image")


class AwaitableGetFargateWorkloadAgentResult(GetFargateWorkloadAgentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFargateWorkloadAgentResult(
            collector_host=self.collector_host,
            collector_port=self.collector_port,
            container_definitions=self.container_definitions,
            id=self.id,
            image_auth_secret=self.image_auth_secret,
            orchestrator_host=self.orchestrator_host,
            orchestrator_port=self.orchestrator_port,
            output_container_definitions=self.output_container_definitions,
            sysdig_access_key=self.sysdig_access_key,
            workload_agent_image=self.workload_agent_image)


def get_fargate_workload_agent(collector_host: Optional[str] = None,
                               collector_port: Optional[str] = None,
                               container_definitions: Optional[str] = None,
                               image_auth_secret: Optional[str] = None,
                               orchestrator_host: Optional[str] = None,
                               orchestrator_port: Optional[str] = None,
                               sysdig_access_key: Optional[str] = None,
                               workload_agent_image: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFargateWorkloadAgentResult:
    """
    Use this data source to access information about an existing resource.

    :param str collector_host: The collector host to connect to.
    :param str collector_port: The collector port to connect to.
    :param str container_definitions: The input Fargate container definitions to instrument with the Sysdig workload agent.
    :param str image_auth_secret: The registry authentication secret.
    :param str orchestrator_host: The orchestrator host to connect to.
    :param str orchestrator_port: The orchestrator port to connect to.
    :param str sysdig_access_key: The Sysdig Access Key (Agent token).
    :param str workload_agent_image: The Sysdig workload agent image.
    """
    __args__ = dict()
    __args__['collectorHost'] = collector_host
    __args__['collectorPort'] = collector_port
    __args__['containerDefinitions'] = container_definitions
    __args__['imageAuthSecret'] = image_auth_secret
    __args__['orchestratorHost'] = orchestrator_host
    __args__['orchestratorPort'] = orchestrator_port
    __args__['sysdigAccessKey'] = sysdig_access_key
    __args__['workloadAgentImage'] = workload_agent_image
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('sysdig:index/getFargateWorkloadAgent:GetFargateWorkloadAgent', __args__, opts=opts, typ=GetFargateWorkloadAgentResult).value

    return AwaitableGetFargateWorkloadAgentResult(
        collector_host=__ret__.collector_host,
        collector_port=__ret__.collector_port,
        container_definitions=__ret__.container_definitions,
        id=__ret__.id,
        image_auth_secret=__ret__.image_auth_secret,
        orchestrator_host=__ret__.orchestrator_host,
        orchestrator_port=__ret__.orchestrator_port,
        output_container_definitions=__ret__.output_container_definitions,
        sysdig_access_key=__ret__.sysdig_access_key,
        workload_agent_image=__ret__.workload_agent_image)


@_utilities.lift_output_func(get_fargate_workload_agent)
def get_fargate_workload_agent_output(collector_host: Optional[pulumi.Input[Optional[str]]] = None,
                                      collector_port: Optional[pulumi.Input[Optional[str]]] = None,
                                      container_definitions: Optional[pulumi.Input[str]] = None,
                                      image_auth_secret: Optional[pulumi.Input[Optional[str]]] = None,
                                      orchestrator_host: Optional[pulumi.Input[Optional[str]]] = None,
                                      orchestrator_port: Optional[pulumi.Input[Optional[str]]] = None,
                                      sysdig_access_key: Optional[pulumi.Input[str]] = None,
                                      workload_agent_image: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFargateWorkloadAgentResult]:
    """
    Use this data source to access information about an existing resource.

    :param str collector_host: The collector host to connect to.
    :param str collector_port: The collector port to connect to.
    :param str container_definitions: The input Fargate container definitions to instrument with the Sysdig workload agent.
    :param str image_auth_secret: The registry authentication secret.
    :param str orchestrator_host: The orchestrator host to connect to.
    :param str orchestrator_port: The orchestrator port to connect to.
    :param str sysdig_access_key: The Sysdig Access Key (Agent token).
    :param str workload_agent_image: The Sysdig workload agent image.
    """
    ...
