// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AlertMetric struct {
	pulumi.CustomResourceState

	Capture               AlertMetricCapturePtrOutput            `pulumi:"capture"`
	CustomNotification    AlertMetricCustomNotificationPtrOutput `pulumi:"customNotification"`
	Description           pulumi.StringPtrOutput                 `pulumi:"description"`
	Enabled               pulumi.BoolPtrOutput                   `pulumi:"enabled"`
	Metric                pulumi.StringOutput                    `pulumi:"metric"`
	MultipleAlertsBies    pulumi.StringArrayOutput               `pulumi:"multipleAlertsBies"`
	Name                  pulumi.StringOutput                    `pulumi:"name"`
	NotificationChannels  pulumi.IntArrayOutput                  `pulumi:"notificationChannels"`
	RenotificationMinutes pulumi.IntPtrOutput                    `pulumi:"renotificationMinutes"`
	Scope                 pulumi.StringPtrOutput                 `pulumi:"scope"`
	Severity              pulumi.IntPtrOutput                    `pulumi:"severity"`
	Team                  pulumi.IntOutput                       `pulumi:"team"`
	TriggerAfterMinutes   pulumi.IntOutput                       `pulumi:"triggerAfterMinutes"`
	Version               pulumi.IntOutput                       `pulumi:"version"`
}

// NewAlertMetric registers a new resource with the given unique name, arguments, and options.
func NewAlertMetric(ctx *pulumi.Context,
	name string, args *AlertMetricArgs, opts ...pulumi.ResourceOption) (*AlertMetric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.TriggerAfterMinutes == nil {
		return nil, errors.New("invalid value for required argument 'TriggerAfterMinutes'")
	}
	var resource AlertMetric
	err := ctx.RegisterResource("sysdig:Monitor/alertMetric:AlertMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertMetric gets an existing AlertMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertMetricState, opts ...pulumi.ResourceOption) (*AlertMetric, error) {
	var resource AlertMetric
	err := ctx.ReadResource("sysdig:Monitor/alertMetric:AlertMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertMetric resources.
type alertMetricState struct {
	Capture               *AlertMetricCapture            `pulumi:"capture"`
	CustomNotification    *AlertMetricCustomNotification `pulumi:"customNotification"`
	Description           *string                        `pulumi:"description"`
	Enabled               *bool                          `pulumi:"enabled"`
	Metric                *string                        `pulumi:"metric"`
	MultipleAlertsBies    []string                       `pulumi:"multipleAlertsBies"`
	Name                  *string                        `pulumi:"name"`
	NotificationChannels  []int                          `pulumi:"notificationChannels"`
	RenotificationMinutes *int                           `pulumi:"renotificationMinutes"`
	Scope                 *string                        `pulumi:"scope"`
	Severity              *int                           `pulumi:"severity"`
	Team                  *int                           `pulumi:"team"`
	TriggerAfterMinutes   *int                           `pulumi:"triggerAfterMinutes"`
	Version               *int                           `pulumi:"version"`
}

type AlertMetricState struct {
	Capture               AlertMetricCapturePtrInput
	CustomNotification    AlertMetricCustomNotificationPtrInput
	Description           pulumi.StringPtrInput
	Enabled               pulumi.BoolPtrInput
	Metric                pulumi.StringPtrInput
	MultipleAlertsBies    pulumi.StringArrayInput
	Name                  pulumi.StringPtrInput
	NotificationChannels  pulumi.IntArrayInput
	RenotificationMinutes pulumi.IntPtrInput
	Scope                 pulumi.StringPtrInput
	Severity              pulumi.IntPtrInput
	Team                  pulumi.IntPtrInput
	TriggerAfterMinutes   pulumi.IntPtrInput
	Version               pulumi.IntPtrInput
}

func (AlertMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertMetricState)(nil)).Elem()
}

type alertMetricArgs struct {
	Capture               *AlertMetricCapture            `pulumi:"capture"`
	CustomNotification    *AlertMetricCustomNotification `pulumi:"customNotification"`
	Description           *string                        `pulumi:"description"`
	Enabled               *bool                          `pulumi:"enabled"`
	Metric                string                         `pulumi:"metric"`
	MultipleAlertsBies    []string                       `pulumi:"multipleAlertsBies"`
	Name                  *string                        `pulumi:"name"`
	NotificationChannels  []int                          `pulumi:"notificationChannels"`
	RenotificationMinutes *int                           `pulumi:"renotificationMinutes"`
	Scope                 *string                        `pulumi:"scope"`
	Severity              *int                           `pulumi:"severity"`
	TriggerAfterMinutes   int                            `pulumi:"triggerAfterMinutes"`
}

// The set of arguments for constructing a AlertMetric resource.
type AlertMetricArgs struct {
	Capture               AlertMetricCapturePtrInput
	CustomNotification    AlertMetricCustomNotificationPtrInput
	Description           pulumi.StringPtrInput
	Enabled               pulumi.BoolPtrInput
	Metric                pulumi.StringInput
	MultipleAlertsBies    pulumi.StringArrayInput
	Name                  pulumi.StringPtrInput
	NotificationChannels  pulumi.IntArrayInput
	RenotificationMinutes pulumi.IntPtrInput
	Scope                 pulumi.StringPtrInput
	Severity              pulumi.IntPtrInput
	TriggerAfterMinutes   pulumi.IntInput
}

func (AlertMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertMetricArgs)(nil)).Elem()
}

type AlertMetricInput interface {
	pulumi.Input

	ToAlertMetricOutput() AlertMetricOutput
	ToAlertMetricOutputWithContext(ctx context.Context) AlertMetricOutput
}

func (*AlertMetric) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMetric)(nil))
}

func (i *AlertMetric) ToAlertMetricOutput() AlertMetricOutput {
	return i.ToAlertMetricOutputWithContext(context.Background())
}

func (i *AlertMetric) ToAlertMetricOutputWithContext(ctx context.Context) AlertMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMetricOutput)
}

func (i *AlertMetric) ToAlertMetricPtrOutput() AlertMetricPtrOutput {
	return i.ToAlertMetricPtrOutputWithContext(context.Background())
}

func (i *AlertMetric) ToAlertMetricPtrOutputWithContext(ctx context.Context) AlertMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMetricPtrOutput)
}

type AlertMetricPtrInput interface {
	pulumi.Input

	ToAlertMetricPtrOutput() AlertMetricPtrOutput
	ToAlertMetricPtrOutputWithContext(ctx context.Context) AlertMetricPtrOutput
}

type alertMetricPtrType AlertMetricArgs

func (*alertMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMetric)(nil))
}

func (i *alertMetricPtrType) ToAlertMetricPtrOutput() AlertMetricPtrOutput {
	return i.ToAlertMetricPtrOutputWithContext(context.Background())
}

func (i *alertMetricPtrType) ToAlertMetricPtrOutputWithContext(ctx context.Context) AlertMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMetricPtrOutput)
}

// AlertMetricArrayInput is an input type that accepts AlertMetricArray and AlertMetricArrayOutput values.
// You can construct a concrete instance of `AlertMetricArrayInput` via:
//
//          AlertMetricArray{ AlertMetricArgs{...} }
type AlertMetricArrayInput interface {
	pulumi.Input

	ToAlertMetricArrayOutput() AlertMetricArrayOutput
	ToAlertMetricArrayOutputWithContext(context.Context) AlertMetricArrayOutput
}

type AlertMetricArray []AlertMetricInput

func (AlertMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertMetric)(nil)).Elem()
}

func (i AlertMetricArray) ToAlertMetricArrayOutput() AlertMetricArrayOutput {
	return i.ToAlertMetricArrayOutputWithContext(context.Background())
}

func (i AlertMetricArray) ToAlertMetricArrayOutputWithContext(ctx context.Context) AlertMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMetricArrayOutput)
}

// AlertMetricMapInput is an input type that accepts AlertMetricMap and AlertMetricMapOutput values.
// You can construct a concrete instance of `AlertMetricMapInput` via:
//
//          AlertMetricMap{ "key": AlertMetricArgs{...} }
type AlertMetricMapInput interface {
	pulumi.Input

	ToAlertMetricMapOutput() AlertMetricMapOutput
	ToAlertMetricMapOutputWithContext(context.Context) AlertMetricMapOutput
}

type AlertMetricMap map[string]AlertMetricInput

func (AlertMetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertMetric)(nil)).Elem()
}

func (i AlertMetricMap) ToAlertMetricMapOutput() AlertMetricMapOutput {
	return i.ToAlertMetricMapOutputWithContext(context.Background())
}

func (i AlertMetricMap) ToAlertMetricMapOutputWithContext(ctx context.Context) AlertMetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMetricMapOutput)
}

type AlertMetricOutput struct{ *pulumi.OutputState }

func (AlertMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMetric)(nil))
}

func (o AlertMetricOutput) ToAlertMetricOutput() AlertMetricOutput {
	return o
}

func (o AlertMetricOutput) ToAlertMetricOutputWithContext(ctx context.Context) AlertMetricOutput {
	return o
}

func (o AlertMetricOutput) ToAlertMetricPtrOutput() AlertMetricPtrOutput {
	return o.ToAlertMetricPtrOutputWithContext(context.Background())
}

func (o AlertMetricOutput) ToAlertMetricPtrOutputWithContext(ctx context.Context) AlertMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertMetric) *AlertMetric {
		return &v
	}).(AlertMetricPtrOutput)
}

type AlertMetricPtrOutput struct{ *pulumi.OutputState }

func (AlertMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMetric)(nil))
}

func (o AlertMetricPtrOutput) ToAlertMetricPtrOutput() AlertMetricPtrOutput {
	return o
}

func (o AlertMetricPtrOutput) ToAlertMetricPtrOutputWithContext(ctx context.Context) AlertMetricPtrOutput {
	return o
}

func (o AlertMetricPtrOutput) Elem() AlertMetricOutput {
	return o.ApplyT(func(v *AlertMetric) AlertMetric {
		if v != nil {
			return *v
		}
		var ret AlertMetric
		return ret
	}).(AlertMetricOutput)
}

type AlertMetricArrayOutput struct{ *pulumi.OutputState }

func (AlertMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertMetric)(nil))
}

func (o AlertMetricArrayOutput) ToAlertMetricArrayOutput() AlertMetricArrayOutput {
	return o
}

func (o AlertMetricArrayOutput) ToAlertMetricArrayOutputWithContext(ctx context.Context) AlertMetricArrayOutput {
	return o
}

func (o AlertMetricArrayOutput) Index(i pulumi.IntInput) AlertMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertMetric {
		return vs[0].([]AlertMetric)[vs[1].(int)]
	}).(AlertMetricOutput)
}

type AlertMetricMapOutput struct{ *pulumi.OutputState }

func (AlertMetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AlertMetric)(nil))
}

func (o AlertMetricMapOutput) ToAlertMetricMapOutput() AlertMetricMapOutput {
	return o
}

func (o AlertMetricMapOutput) ToAlertMetricMapOutputWithContext(ctx context.Context) AlertMetricMapOutput {
	return o
}

func (o AlertMetricMapOutput) MapIndex(k pulumi.StringInput) AlertMetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AlertMetric {
		return vs[0].(map[string]AlertMetric)[vs[1].(string)]
	}).(AlertMetricOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertMetricOutput{})
	pulumi.RegisterOutputType(AlertMetricPtrOutput{})
	pulumi.RegisterOutputType(AlertMetricArrayOutput{})
	pulumi.RegisterOutputType(AlertMetricMapOutput{})
}
