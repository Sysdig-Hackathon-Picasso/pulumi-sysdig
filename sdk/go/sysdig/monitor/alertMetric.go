// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Metric Monitor alerts can be imported using the alert ID, e.g.
//
// ```sh
//  $ pulumi import sysdig:Monitor/alertMetric:AlertMetric example 12345
// ```
type AlertMetric struct {
	pulumi.CustomResourceState

	// Enables the creation of a capture file of the syscalls during the event.
	Capture AlertMetricCapturePtrOutput `pulumi:"capture"`
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification AlertMetricCustomNotificationPtrOutput `pulumi:"customNotification"`
	// The description of Monitor alert.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Metric to monitor and alert on. Example: `sum(timeAvg(kubernetes.pod.restart.count)) > 2` or `avg(avg(cpu.used.percent)) > 50`.
	Metric pulumi.StringOutput `pulumi:"metric"`
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies pulumi.StringArrayOutput `pulumi:"multipleAlertsBies"`
	// The name of the Monitor alert. It must be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels pulumi.IntArrayOutput `pulumi:"notificationChannels"`
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes pulumi.IntPtrOutput `pulumi:"renotificationMinutes"`
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity pulumi.IntPtrOutput `pulumi:"severity"`
	// Team ID that owns the alert.
	Team pulumi.IntOutput `pulumi:"team"`
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes pulumi.IntOutput `pulumi:"triggerAfterMinutes"`
	// Current version of the resource in Sysdig Monitor.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewAlertMetric registers a new resource with the given unique name, arguments, and options.
func NewAlertMetric(ctx *pulumi.Context,
	name string, args *AlertMetricArgs, opts ...pulumi.ResourceOption) (*AlertMetric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.TriggerAfterMinutes == nil {
		return nil, errors.New("invalid value for required argument 'TriggerAfterMinutes'")
	}
	var resource AlertMetric
	err := ctx.RegisterResource("sysdig:Monitor/alertMetric:AlertMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertMetric gets an existing AlertMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertMetricState, opts ...pulumi.ResourceOption) (*AlertMetric, error) {
	var resource AlertMetric
	err := ctx.ReadResource("sysdig:Monitor/alertMetric:AlertMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertMetric resources.
type alertMetricState struct {
	// Enables the creation of a capture file of the syscalls during the event.
	Capture *AlertMetricCapture `pulumi:"capture"`
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification *AlertMetricCustomNotification `pulumi:"customNotification"`
	// The description of Monitor alert.
	Description *string `pulumi:"description"`
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled *bool `pulumi:"enabled"`
	// Metric to monitor and alert on. Example: `sum(timeAvg(kubernetes.pod.restart.count)) > 2` or `avg(avg(cpu.used.percent)) > 50`.
	Metric *string `pulumi:"metric"`
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies []string `pulumi:"multipleAlertsBies"`
	// The name of the Monitor alert. It must be unique.
	Name *string `pulumi:"name"`
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels []int `pulumi:"notificationChannels"`
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes *int `pulumi:"renotificationMinutes"`
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope *string `pulumi:"scope"`
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity *int `pulumi:"severity"`
	// Team ID that owns the alert.
	Team *int `pulumi:"team"`
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes *int `pulumi:"triggerAfterMinutes"`
	// Current version of the resource in Sysdig Monitor.
	Version *int `pulumi:"version"`
}

type AlertMetricState struct {
	// Enables the creation of a capture file of the syscalls during the event.
	Capture AlertMetricCapturePtrInput
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification AlertMetricCustomNotificationPtrInput
	// The description of Monitor alert.
	Description pulumi.StringPtrInput
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled pulumi.BoolPtrInput
	// Metric to monitor and alert on. Example: `sum(timeAvg(kubernetes.pod.restart.count)) > 2` or `avg(avg(cpu.used.percent)) > 50`.
	Metric pulumi.StringPtrInput
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies pulumi.StringArrayInput
	// The name of the Monitor alert. It must be unique.
	Name pulumi.StringPtrInput
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels pulumi.IntArrayInput
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes pulumi.IntPtrInput
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope pulumi.StringPtrInput
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity pulumi.IntPtrInput
	// Team ID that owns the alert.
	Team pulumi.IntPtrInput
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes pulumi.IntPtrInput
	// Current version of the resource in Sysdig Monitor.
	Version pulumi.IntPtrInput
}

func (AlertMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertMetricState)(nil)).Elem()
}

type alertMetricArgs struct {
	// Enables the creation of a capture file of the syscalls during the event.
	Capture *AlertMetricCapture `pulumi:"capture"`
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification *AlertMetricCustomNotification `pulumi:"customNotification"`
	// The description of Monitor alert.
	Description *string `pulumi:"description"`
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled *bool `pulumi:"enabled"`
	// Metric to monitor and alert on. Example: `sum(timeAvg(kubernetes.pod.restart.count)) > 2` or `avg(avg(cpu.used.percent)) > 50`.
	Metric string `pulumi:"metric"`
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies []string `pulumi:"multipleAlertsBies"`
	// The name of the Monitor alert. It must be unique.
	Name *string `pulumi:"name"`
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels []int `pulumi:"notificationChannels"`
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes *int `pulumi:"renotificationMinutes"`
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope *string `pulumi:"scope"`
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity *int `pulumi:"severity"`
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes int `pulumi:"triggerAfterMinutes"`
}

// The set of arguments for constructing a AlertMetric resource.
type AlertMetricArgs struct {
	// Enables the creation of a capture file of the syscalls during the event.
	Capture AlertMetricCapturePtrInput
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification AlertMetricCustomNotificationPtrInput
	// The description of Monitor alert.
	Description pulumi.StringPtrInput
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled pulumi.BoolPtrInput
	// Metric to monitor and alert on. Example: `sum(timeAvg(kubernetes.pod.restart.count)) > 2` or `avg(avg(cpu.used.percent)) > 50`.
	Metric pulumi.StringInput
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies pulumi.StringArrayInput
	// The name of the Monitor alert. It must be unique.
	Name pulumi.StringPtrInput
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels pulumi.IntArrayInput
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes pulumi.IntPtrInput
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope pulumi.StringPtrInput
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity pulumi.IntPtrInput
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes pulumi.IntInput
}

func (AlertMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertMetricArgs)(nil)).Elem()
}

type AlertMetricInput interface {
	pulumi.Input

	ToAlertMetricOutput() AlertMetricOutput
	ToAlertMetricOutputWithContext(ctx context.Context) AlertMetricOutput
}

func (*AlertMetric) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMetric)(nil))
}

func (i *AlertMetric) ToAlertMetricOutput() AlertMetricOutput {
	return i.ToAlertMetricOutputWithContext(context.Background())
}

func (i *AlertMetric) ToAlertMetricOutputWithContext(ctx context.Context) AlertMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMetricOutput)
}

func (i *AlertMetric) ToAlertMetricPtrOutput() AlertMetricPtrOutput {
	return i.ToAlertMetricPtrOutputWithContext(context.Background())
}

func (i *AlertMetric) ToAlertMetricPtrOutputWithContext(ctx context.Context) AlertMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMetricPtrOutput)
}

type AlertMetricPtrInput interface {
	pulumi.Input

	ToAlertMetricPtrOutput() AlertMetricPtrOutput
	ToAlertMetricPtrOutputWithContext(ctx context.Context) AlertMetricPtrOutput
}

type alertMetricPtrType AlertMetricArgs

func (*alertMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMetric)(nil))
}

func (i *alertMetricPtrType) ToAlertMetricPtrOutput() AlertMetricPtrOutput {
	return i.ToAlertMetricPtrOutputWithContext(context.Background())
}

func (i *alertMetricPtrType) ToAlertMetricPtrOutputWithContext(ctx context.Context) AlertMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMetricPtrOutput)
}

// AlertMetricArrayInput is an input type that accepts AlertMetricArray and AlertMetricArrayOutput values.
// You can construct a concrete instance of `AlertMetricArrayInput` via:
//
//          AlertMetricArray{ AlertMetricArgs{...} }
type AlertMetricArrayInput interface {
	pulumi.Input

	ToAlertMetricArrayOutput() AlertMetricArrayOutput
	ToAlertMetricArrayOutputWithContext(context.Context) AlertMetricArrayOutput
}

type AlertMetricArray []AlertMetricInput

func (AlertMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertMetric)(nil)).Elem()
}

func (i AlertMetricArray) ToAlertMetricArrayOutput() AlertMetricArrayOutput {
	return i.ToAlertMetricArrayOutputWithContext(context.Background())
}

func (i AlertMetricArray) ToAlertMetricArrayOutputWithContext(ctx context.Context) AlertMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMetricArrayOutput)
}

// AlertMetricMapInput is an input type that accepts AlertMetricMap and AlertMetricMapOutput values.
// You can construct a concrete instance of `AlertMetricMapInput` via:
//
//          AlertMetricMap{ "key": AlertMetricArgs{...} }
type AlertMetricMapInput interface {
	pulumi.Input

	ToAlertMetricMapOutput() AlertMetricMapOutput
	ToAlertMetricMapOutputWithContext(context.Context) AlertMetricMapOutput
}

type AlertMetricMap map[string]AlertMetricInput

func (AlertMetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertMetric)(nil)).Elem()
}

func (i AlertMetricMap) ToAlertMetricMapOutput() AlertMetricMapOutput {
	return i.ToAlertMetricMapOutputWithContext(context.Background())
}

func (i AlertMetricMap) ToAlertMetricMapOutputWithContext(ctx context.Context) AlertMetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMetricMapOutput)
}

type AlertMetricOutput struct{ *pulumi.OutputState }

func (AlertMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMetric)(nil))
}

func (o AlertMetricOutput) ToAlertMetricOutput() AlertMetricOutput {
	return o
}

func (o AlertMetricOutput) ToAlertMetricOutputWithContext(ctx context.Context) AlertMetricOutput {
	return o
}

func (o AlertMetricOutput) ToAlertMetricPtrOutput() AlertMetricPtrOutput {
	return o.ToAlertMetricPtrOutputWithContext(context.Background())
}

func (o AlertMetricOutput) ToAlertMetricPtrOutputWithContext(ctx context.Context) AlertMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertMetric) *AlertMetric {
		return &v
	}).(AlertMetricPtrOutput)
}

type AlertMetricPtrOutput struct{ *pulumi.OutputState }

func (AlertMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMetric)(nil))
}

func (o AlertMetricPtrOutput) ToAlertMetricPtrOutput() AlertMetricPtrOutput {
	return o
}

func (o AlertMetricPtrOutput) ToAlertMetricPtrOutputWithContext(ctx context.Context) AlertMetricPtrOutput {
	return o
}

func (o AlertMetricPtrOutput) Elem() AlertMetricOutput {
	return o.ApplyT(func(v *AlertMetric) AlertMetric {
		if v != nil {
			return *v
		}
		var ret AlertMetric
		return ret
	}).(AlertMetricOutput)
}

type AlertMetricArrayOutput struct{ *pulumi.OutputState }

func (AlertMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertMetric)(nil))
}

func (o AlertMetricArrayOutput) ToAlertMetricArrayOutput() AlertMetricArrayOutput {
	return o
}

func (o AlertMetricArrayOutput) ToAlertMetricArrayOutputWithContext(ctx context.Context) AlertMetricArrayOutput {
	return o
}

func (o AlertMetricArrayOutput) Index(i pulumi.IntInput) AlertMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertMetric {
		return vs[0].([]AlertMetric)[vs[1].(int)]
	}).(AlertMetricOutput)
}

type AlertMetricMapOutput struct{ *pulumi.OutputState }

func (AlertMetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AlertMetric)(nil))
}

func (o AlertMetricMapOutput) ToAlertMetricMapOutput() AlertMetricMapOutput {
	return o
}

func (o AlertMetricMapOutput) ToAlertMetricMapOutputWithContext(ctx context.Context) AlertMetricMapOutput {
	return o
}

func (o AlertMetricMapOutput) MapIndex(k pulumi.StringInput) AlertMetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AlertMetric {
		return vs[0].(map[string]AlertMetric)[vs[1].(string)]
	}).(AlertMetricOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertMetricOutput{})
	pulumi.RegisterOutputType(AlertMetricPtrOutput{})
	pulumi.RegisterOutputType(AlertMetricArrayOutput{})
	pulumi.RegisterOutputType(AlertMetricMapOutput{})
}
