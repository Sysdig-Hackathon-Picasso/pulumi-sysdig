// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AlertEvent struct {
	pulumi.CustomResourceState

	Capture               AlertEventCapturePtrOutput            `pulumi:"capture"`
	CustomNotification    AlertEventCustomNotificationPtrOutput `pulumi:"customNotification"`
	Description           pulumi.StringPtrOutput                `pulumi:"description"`
	Enabled               pulumi.BoolPtrOutput                  `pulumi:"enabled"`
	EventCount            pulumi.IntOutput                      `pulumi:"eventCount"`
	EventName             pulumi.StringOutput                   `pulumi:"eventName"`
	EventRel              pulumi.StringOutput                   `pulumi:"eventRel"`
	MultipleAlertsBies    pulumi.StringArrayOutput              `pulumi:"multipleAlertsBies"`
	Name                  pulumi.StringOutput                   `pulumi:"name"`
	NotificationChannels  pulumi.IntArrayOutput                 `pulumi:"notificationChannels"`
	RenotificationMinutes pulumi.IntPtrOutput                   `pulumi:"renotificationMinutes"`
	Scope                 pulumi.StringPtrOutput                `pulumi:"scope"`
	Severity              pulumi.IntPtrOutput                   `pulumi:"severity"`
	Source                pulumi.StringOutput                   `pulumi:"source"`
	Team                  pulumi.IntOutput                      `pulumi:"team"`
	TriggerAfterMinutes   pulumi.IntOutput                      `pulumi:"triggerAfterMinutes"`
	Version               pulumi.IntOutput                      `pulumi:"version"`
}

// NewAlertEvent registers a new resource with the given unique name, arguments, and options.
func NewAlertEvent(ctx *pulumi.Context,
	name string, args *AlertEventArgs, opts ...pulumi.ResourceOption) (*AlertEvent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventCount == nil {
		return nil, errors.New("invalid value for required argument 'EventCount'")
	}
	if args.EventName == nil {
		return nil, errors.New("invalid value for required argument 'EventName'")
	}
	if args.EventRel == nil {
		return nil, errors.New("invalid value for required argument 'EventRel'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.TriggerAfterMinutes == nil {
		return nil, errors.New("invalid value for required argument 'TriggerAfterMinutes'")
	}
	var resource AlertEvent
	err := ctx.RegisterResource("sysdig:Monitor/alertEvent:AlertEvent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertEvent gets an existing AlertEvent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertEvent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertEventState, opts ...pulumi.ResourceOption) (*AlertEvent, error) {
	var resource AlertEvent
	err := ctx.ReadResource("sysdig:Monitor/alertEvent:AlertEvent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertEvent resources.
type alertEventState struct {
	Capture               *AlertEventCapture            `pulumi:"capture"`
	CustomNotification    *AlertEventCustomNotification `pulumi:"customNotification"`
	Description           *string                       `pulumi:"description"`
	Enabled               *bool                         `pulumi:"enabled"`
	EventCount            *int                          `pulumi:"eventCount"`
	EventName             *string                       `pulumi:"eventName"`
	EventRel              *string                       `pulumi:"eventRel"`
	MultipleAlertsBies    []string                      `pulumi:"multipleAlertsBies"`
	Name                  *string                       `pulumi:"name"`
	NotificationChannels  []int                         `pulumi:"notificationChannels"`
	RenotificationMinutes *int                          `pulumi:"renotificationMinutes"`
	Scope                 *string                       `pulumi:"scope"`
	Severity              *int                          `pulumi:"severity"`
	Source                *string                       `pulumi:"source"`
	Team                  *int                          `pulumi:"team"`
	TriggerAfterMinutes   *int                          `pulumi:"triggerAfterMinutes"`
	Version               *int                          `pulumi:"version"`
}

type AlertEventState struct {
	Capture               AlertEventCapturePtrInput
	CustomNotification    AlertEventCustomNotificationPtrInput
	Description           pulumi.StringPtrInput
	Enabled               pulumi.BoolPtrInput
	EventCount            pulumi.IntPtrInput
	EventName             pulumi.StringPtrInput
	EventRel              pulumi.StringPtrInput
	MultipleAlertsBies    pulumi.StringArrayInput
	Name                  pulumi.StringPtrInput
	NotificationChannels  pulumi.IntArrayInput
	RenotificationMinutes pulumi.IntPtrInput
	Scope                 pulumi.StringPtrInput
	Severity              pulumi.IntPtrInput
	Source                pulumi.StringPtrInput
	Team                  pulumi.IntPtrInput
	TriggerAfterMinutes   pulumi.IntPtrInput
	Version               pulumi.IntPtrInput
}

func (AlertEventState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertEventState)(nil)).Elem()
}

type alertEventArgs struct {
	Capture               *AlertEventCapture            `pulumi:"capture"`
	CustomNotification    *AlertEventCustomNotification `pulumi:"customNotification"`
	Description           *string                       `pulumi:"description"`
	Enabled               *bool                         `pulumi:"enabled"`
	EventCount            int                           `pulumi:"eventCount"`
	EventName             string                        `pulumi:"eventName"`
	EventRel              string                        `pulumi:"eventRel"`
	MultipleAlertsBies    []string                      `pulumi:"multipleAlertsBies"`
	Name                  *string                       `pulumi:"name"`
	NotificationChannels  []int                         `pulumi:"notificationChannels"`
	RenotificationMinutes *int                          `pulumi:"renotificationMinutes"`
	Scope                 *string                       `pulumi:"scope"`
	Severity              *int                          `pulumi:"severity"`
	Source                string                        `pulumi:"source"`
	TriggerAfterMinutes   int                           `pulumi:"triggerAfterMinutes"`
}

// The set of arguments for constructing a AlertEvent resource.
type AlertEventArgs struct {
	Capture               AlertEventCapturePtrInput
	CustomNotification    AlertEventCustomNotificationPtrInput
	Description           pulumi.StringPtrInput
	Enabled               pulumi.BoolPtrInput
	EventCount            pulumi.IntInput
	EventName             pulumi.StringInput
	EventRel              pulumi.StringInput
	MultipleAlertsBies    pulumi.StringArrayInput
	Name                  pulumi.StringPtrInput
	NotificationChannels  pulumi.IntArrayInput
	RenotificationMinutes pulumi.IntPtrInput
	Scope                 pulumi.StringPtrInput
	Severity              pulumi.IntPtrInput
	Source                pulumi.StringInput
	TriggerAfterMinutes   pulumi.IntInput
}

func (AlertEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertEventArgs)(nil)).Elem()
}

type AlertEventInput interface {
	pulumi.Input

	ToAlertEventOutput() AlertEventOutput
	ToAlertEventOutputWithContext(ctx context.Context) AlertEventOutput
}

func (*AlertEvent) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEvent)(nil))
}

func (i *AlertEvent) ToAlertEventOutput() AlertEventOutput {
	return i.ToAlertEventOutputWithContext(context.Background())
}

func (i *AlertEvent) ToAlertEventOutputWithContext(ctx context.Context) AlertEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEventOutput)
}

func (i *AlertEvent) ToAlertEventPtrOutput() AlertEventPtrOutput {
	return i.ToAlertEventPtrOutputWithContext(context.Background())
}

func (i *AlertEvent) ToAlertEventPtrOutputWithContext(ctx context.Context) AlertEventPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEventPtrOutput)
}

type AlertEventPtrInput interface {
	pulumi.Input

	ToAlertEventPtrOutput() AlertEventPtrOutput
	ToAlertEventPtrOutputWithContext(ctx context.Context) AlertEventPtrOutput
}

type alertEventPtrType AlertEventArgs

func (*alertEventPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEvent)(nil))
}

func (i *alertEventPtrType) ToAlertEventPtrOutput() AlertEventPtrOutput {
	return i.ToAlertEventPtrOutputWithContext(context.Background())
}

func (i *alertEventPtrType) ToAlertEventPtrOutputWithContext(ctx context.Context) AlertEventPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEventPtrOutput)
}

// AlertEventArrayInput is an input type that accepts AlertEventArray and AlertEventArrayOutput values.
// You can construct a concrete instance of `AlertEventArrayInput` via:
//
//          AlertEventArray{ AlertEventArgs{...} }
type AlertEventArrayInput interface {
	pulumi.Input

	ToAlertEventArrayOutput() AlertEventArrayOutput
	ToAlertEventArrayOutputWithContext(context.Context) AlertEventArrayOutput
}

type AlertEventArray []AlertEventInput

func (AlertEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertEvent)(nil)).Elem()
}

func (i AlertEventArray) ToAlertEventArrayOutput() AlertEventArrayOutput {
	return i.ToAlertEventArrayOutputWithContext(context.Background())
}

func (i AlertEventArray) ToAlertEventArrayOutputWithContext(ctx context.Context) AlertEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEventArrayOutput)
}

// AlertEventMapInput is an input type that accepts AlertEventMap and AlertEventMapOutput values.
// You can construct a concrete instance of `AlertEventMapInput` via:
//
//          AlertEventMap{ "key": AlertEventArgs{...} }
type AlertEventMapInput interface {
	pulumi.Input

	ToAlertEventMapOutput() AlertEventMapOutput
	ToAlertEventMapOutputWithContext(context.Context) AlertEventMapOutput
}

type AlertEventMap map[string]AlertEventInput

func (AlertEventMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertEvent)(nil)).Elem()
}

func (i AlertEventMap) ToAlertEventMapOutput() AlertEventMapOutput {
	return i.ToAlertEventMapOutputWithContext(context.Background())
}

func (i AlertEventMap) ToAlertEventMapOutputWithContext(ctx context.Context) AlertEventMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEventMapOutput)
}

type AlertEventOutput struct{ *pulumi.OutputState }

func (AlertEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEvent)(nil))
}

func (o AlertEventOutput) ToAlertEventOutput() AlertEventOutput {
	return o
}

func (o AlertEventOutput) ToAlertEventOutputWithContext(ctx context.Context) AlertEventOutput {
	return o
}

func (o AlertEventOutput) ToAlertEventPtrOutput() AlertEventPtrOutput {
	return o.ToAlertEventPtrOutputWithContext(context.Background())
}

func (o AlertEventOutput) ToAlertEventPtrOutputWithContext(ctx context.Context) AlertEventPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEvent) *AlertEvent {
		return &v
	}).(AlertEventPtrOutput)
}

type AlertEventPtrOutput struct{ *pulumi.OutputState }

func (AlertEventPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEvent)(nil))
}

func (o AlertEventPtrOutput) ToAlertEventPtrOutput() AlertEventPtrOutput {
	return o
}

func (o AlertEventPtrOutput) ToAlertEventPtrOutputWithContext(ctx context.Context) AlertEventPtrOutput {
	return o
}

func (o AlertEventPtrOutput) Elem() AlertEventOutput {
	return o.ApplyT(func(v *AlertEvent) AlertEvent {
		if v != nil {
			return *v
		}
		var ret AlertEvent
		return ret
	}).(AlertEventOutput)
}

type AlertEventArrayOutput struct{ *pulumi.OutputState }

func (AlertEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertEvent)(nil))
}

func (o AlertEventArrayOutput) ToAlertEventArrayOutput() AlertEventArrayOutput {
	return o
}

func (o AlertEventArrayOutput) ToAlertEventArrayOutputWithContext(ctx context.Context) AlertEventArrayOutput {
	return o
}

func (o AlertEventArrayOutput) Index(i pulumi.IntInput) AlertEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertEvent {
		return vs[0].([]AlertEvent)[vs[1].(int)]
	}).(AlertEventOutput)
}

type AlertEventMapOutput struct{ *pulumi.OutputState }

func (AlertEventMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AlertEvent)(nil))
}

func (o AlertEventMapOutput) ToAlertEventMapOutput() AlertEventMapOutput {
	return o
}

func (o AlertEventMapOutput) ToAlertEventMapOutputWithContext(ctx context.Context) AlertEventMapOutput {
	return o
}

func (o AlertEventMapOutput) MapIndex(k pulumi.StringInput) AlertEventOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AlertEvent {
		return vs[0].(map[string]AlertEvent)[vs[1].(string)]
	}).(AlertEventOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertEventOutput{})
	pulumi.RegisterOutputType(AlertEventPtrOutput{})
	pulumi.RegisterOutputType(AlertEventArrayOutput{})
	pulumi.RegisterOutputType(AlertEventMapOutput{})
}
