// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Event Monitor alerts can be imported using the alert ID, e.g.
//
// ```sh
//  $ pulumi import sysdig:Monitor/alertEvent:AlertEvent example 12345
// ```
type AlertEvent struct {
	pulumi.CustomResourceState

	// Enables the creation of a capture file of the syscalls during the event.
	Capture AlertEventCapturePtrOutput `pulumi:"capture"`
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification AlertEventCustomNotificationPtrOutput `pulumi:"customNotification"`
	// The description of Monitor alert.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Number of events to match with event_rel.
	EventCount pulumi.IntOutput `pulumi:"eventCount"`
	// String that matches part of name, tag or the description of Sysdig Events.
	EventName pulumi.StringOutput `pulumi:"eventName"`
	// Relationship of the event count. It can be `>`, `>=`, `<`, `<=`, `=` or `!=`.
	EventRel pulumi.StringOutput `pulumi:"eventRel"`
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies pulumi.StringArrayOutput `pulumi:"multipleAlertsBies"`
	// The name of the Monitor alert. It must be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels pulumi.IntArrayOutput `pulumi:"notificationChannels"`
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes pulumi.IntPtrOutput `pulumi:"renotificationMinutes"`
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity pulumi.IntPtrOutput `pulumi:"severity"`
	// Source of the event. It can be `docker` or `kubernetes`.
	Source pulumi.StringOutput `pulumi:"source"`
	// Team ID that owns the alert.
	Team pulumi.IntOutput `pulumi:"team"`
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes pulumi.IntOutput `pulumi:"triggerAfterMinutes"`
	// Current version of the resource in Sysdig Monitor.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewAlertEvent registers a new resource with the given unique name, arguments, and options.
func NewAlertEvent(ctx *pulumi.Context,
	name string, args *AlertEventArgs, opts ...pulumi.ResourceOption) (*AlertEvent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventCount == nil {
		return nil, errors.New("invalid value for required argument 'EventCount'")
	}
	if args.EventName == nil {
		return nil, errors.New("invalid value for required argument 'EventName'")
	}
	if args.EventRel == nil {
		return nil, errors.New("invalid value for required argument 'EventRel'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.TriggerAfterMinutes == nil {
		return nil, errors.New("invalid value for required argument 'TriggerAfterMinutes'")
	}
	var resource AlertEvent
	err := ctx.RegisterResource("sysdig:Monitor/alertEvent:AlertEvent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertEvent gets an existing AlertEvent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertEvent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertEventState, opts ...pulumi.ResourceOption) (*AlertEvent, error) {
	var resource AlertEvent
	err := ctx.ReadResource("sysdig:Monitor/alertEvent:AlertEvent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertEvent resources.
type alertEventState struct {
	// Enables the creation of a capture file of the syscalls during the event.
	Capture *AlertEventCapture `pulumi:"capture"`
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification *AlertEventCustomNotification `pulumi:"customNotification"`
	// The description of Monitor alert.
	Description *string `pulumi:"description"`
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled *bool `pulumi:"enabled"`
	// Number of events to match with event_rel.
	EventCount *int `pulumi:"eventCount"`
	// String that matches part of name, tag or the description of Sysdig Events.
	EventName *string `pulumi:"eventName"`
	// Relationship of the event count. It can be `>`, `>=`, `<`, `<=`, `=` or `!=`.
	EventRel *string `pulumi:"eventRel"`
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies []string `pulumi:"multipleAlertsBies"`
	// The name of the Monitor alert. It must be unique.
	Name *string `pulumi:"name"`
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels []int `pulumi:"notificationChannels"`
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes *int `pulumi:"renotificationMinutes"`
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope *string `pulumi:"scope"`
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity *int `pulumi:"severity"`
	// Source of the event. It can be `docker` or `kubernetes`.
	Source *string `pulumi:"source"`
	// Team ID that owns the alert.
	Team *int `pulumi:"team"`
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes *int `pulumi:"triggerAfterMinutes"`
	// Current version of the resource in Sysdig Monitor.
	Version *int `pulumi:"version"`
}

type AlertEventState struct {
	// Enables the creation of a capture file of the syscalls during the event.
	Capture AlertEventCapturePtrInput
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification AlertEventCustomNotificationPtrInput
	// The description of Monitor alert.
	Description pulumi.StringPtrInput
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled pulumi.BoolPtrInput
	// Number of events to match with event_rel.
	EventCount pulumi.IntPtrInput
	// String that matches part of name, tag or the description of Sysdig Events.
	EventName pulumi.StringPtrInput
	// Relationship of the event count. It can be `>`, `>=`, `<`, `<=`, `=` or `!=`.
	EventRel pulumi.StringPtrInput
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies pulumi.StringArrayInput
	// The name of the Monitor alert. It must be unique.
	Name pulumi.StringPtrInput
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels pulumi.IntArrayInput
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes pulumi.IntPtrInput
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope pulumi.StringPtrInput
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity pulumi.IntPtrInput
	// Source of the event. It can be `docker` or `kubernetes`.
	Source pulumi.StringPtrInput
	// Team ID that owns the alert.
	Team pulumi.IntPtrInput
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes pulumi.IntPtrInput
	// Current version of the resource in Sysdig Monitor.
	Version pulumi.IntPtrInput
}

func (AlertEventState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertEventState)(nil)).Elem()
}

type alertEventArgs struct {
	// Enables the creation of a capture file of the syscalls during the event.
	Capture *AlertEventCapture `pulumi:"capture"`
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification *AlertEventCustomNotification `pulumi:"customNotification"`
	// The description of Monitor alert.
	Description *string `pulumi:"description"`
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled *bool `pulumi:"enabled"`
	// Number of events to match with event_rel.
	EventCount int `pulumi:"eventCount"`
	// String that matches part of name, tag or the description of Sysdig Events.
	EventName string `pulumi:"eventName"`
	// Relationship of the event count. It can be `>`, `>=`, `<`, `<=`, `=` or `!=`.
	EventRel string `pulumi:"eventRel"`
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies []string `pulumi:"multipleAlertsBies"`
	// The name of the Monitor alert. It must be unique.
	Name *string `pulumi:"name"`
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels []int `pulumi:"notificationChannels"`
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes *int `pulumi:"renotificationMinutes"`
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope *string `pulumi:"scope"`
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity *int `pulumi:"severity"`
	// Source of the event. It can be `docker` or `kubernetes`.
	Source string `pulumi:"source"`
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes int `pulumi:"triggerAfterMinutes"`
}

// The set of arguments for constructing a AlertEvent resource.
type AlertEventArgs struct {
	// Enables the creation of a capture file of the syscalls during the event.
	Capture AlertEventCapturePtrInput
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification AlertEventCustomNotificationPtrInput
	// The description of Monitor alert.
	Description pulumi.StringPtrInput
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled pulumi.BoolPtrInput
	// Number of events to match with event_rel.
	EventCount pulumi.IntInput
	// String that matches part of name, tag or the description of Sysdig Events.
	EventName pulumi.StringInput
	// Relationship of the event count. It can be `>`, `>=`, `<`, `<=`, `=` or `!=`.
	EventRel pulumi.StringInput
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies pulumi.StringArrayInput
	// The name of the Monitor alert. It must be unique.
	Name pulumi.StringPtrInput
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels pulumi.IntArrayInput
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes pulumi.IntPtrInput
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope pulumi.StringPtrInput
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity pulumi.IntPtrInput
	// Source of the event. It can be `docker` or `kubernetes`.
	Source pulumi.StringInput
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes pulumi.IntInput
}

func (AlertEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertEventArgs)(nil)).Elem()
}

type AlertEventInput interface {
	pulumi.Input

	ToAlertEventOutput() AlertEventOutput
	ToAlertEventOutputWithContext(ctx context.Context) AlertEventOutput
}

func (*AlertEvent) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEvent)(nil))
}

func (i *AlertEvent) ToAlertEventOutput() AlertEventOutput {
	return i.ToAlertEventOutputWithContext(context.Background())
}

func (i *AlertEvent) ToAlertEventOutputWithContext(ctx context.Context) AlertEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEventOutput)
}

func (i *AlertEvent) ToAlertEventPtrOutput() AlertEventPtrOutput {
	return i.ToAlertEventPtrOutputWithContext(context.Background())
}

func (i *AlertEvent) ToAlertEventPtrOutputWithContext(ctx context.Context) AlertEventPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEventPtrOutput)
}

type AlertEventPtrInput interface {
	pulumi.Input

	ToAlertEventPtrOutput() AlertEventPtrOutput
	ToAlertEventPtrOutputWithContext(ctx context.Context) AlertEventPtrOutput
}

type alertEventPtrType AlertEventArgs

func (*alertEventPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEvent)(nil))
}

func (i *alertEventPtrType) ToAlertEventPtrOutput() AlertEventPtrOutput {
	return i.ToAlertEventPtrOutputWithContext(context.Background())
}

func (i *alertEventPtrType) ToAlertEventPtrOutputWithContext(ctx context.Context) AlertEventPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEventPtrOutput)
}

// AlertEventArrayInput is an input type that accepts AlertEventArray and AlertEventArrayOutput values.
// You can construct a concrete instance of `AlertEventArrayInput` via:
//
//          AlertEventArray{ AlertEventArgs{...} }
type AlertEventArrayInput interface {
	pulumi.Input

	ToAlertEventArrayOutput() AlertEventArrayOutput
	ToAlertEventArrayOutputWithContext(context.Context) AlertEventArrayOutput
}

type AlertEventArray []AlertEventInput

func (AlertEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertEvent)(nil)).Elem()
}

func (i AlertEventArray) ToAlertEventArrayOutput() AlertEventArrayOutput {
	return i.ToAlertEventArrayOutputWithContext(context.Background())
}

func (i AlertEventArray) ToAlertEventArrayOutputWithContext(ctx context.Context) AlertEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEventArrayOutput)
}

// AlertEventMapInput is an input type that accepts AlertEventMap and AlertEventMapOutput values.
// You can construct a concrete instance of `AlertEventMapInput` via:
//
//          AlertEventMap{ "key": AlertEventArgs{...} }
type AlertEventMapInput interface {
	pulumi.Input

	ToAlertEventMapOutput() AlertEventMapOutput
	ToAlertEventMapOutputWithContext(context.Context) AlertEventMapOutput
}

type AlertEventMap map[string]AlertEventInput

func (AlertEventMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertEvent)(nil)).Elem()
}

func (i AlertEventMap) ToAlertEventMapOutput() AlertEventMapOutput {
	return i.ToAlertEventMapOutputWithContext(context.Background())
}

func (i AlertEventMap) ToAlertEventMapOutputWithContext(ctx context.Context) AlertEventMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEventMapOutput)
}

type AlertEventOutput struct{ *pulumi.OutputState }

func (AlertEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEvent)(nil))
}

func (o AlertEventOutput) ToAlertEventOutput() AlertEventOutput {
	return o
}

func (o AlertEventOutput) ToAlertEventOutputWithContext(ctx context.Context) AlertEventOutput {
	return o
}

func (o AlertEventOutput) ToAlertEventPtrOutput() AlertEventPtrOutput {
	return o.ToAlertEventPtrOutputWithContext(context.Background())
}

func (o AlertEventOutput) ToAlertEventPtrOutputWithContext(ctx context.Context) AlertEventPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEvent) *AlertEvent {
		return &v
	}).(AlertEventPtrOutput)
}

type AlertEventPtrOutput struct{ *pulumi.OutputState }

func (AlertEventPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEvent)(nil))
}

func (o AlertEventPtrOutput) ToAlertEventPtrOutput() AlertEventPtrOutput {
	return o
}

func (o AlertEventPtrOutput) ToAlertEventPtrOutputWithContext(ctx context.Context) AlertEventPtrOutput {
	return o
}

func (o AlertEventPtrOutput) Elem() AlertEventOutput {
	return o.ApplyT(func(v *AlertEvent) AlertEvent {
		if v != nil {
			return *v
		}
		var ret AlertEvent
		return ret
	}).(AlertEventOutput)
}

type AlertEventArrayOutput struct{ *pulumi.OutputState }

func (AlertEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertEvent)(nil))
}

func (o AlertEventArrayOutput) ToAlertEventArrayOutput() AlertEventArrayOutput {
	return o
}

func (o AlertEventArrayOutput) ToAlertEventArrayOutputWithContext(ctx context.Context) AlertEventArrayOutput {
	return o
}

func (o AlertEventArrayOutput) Index(i pulumi.IntInput) AlertEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertEvent {
		return vs[0].([]AlertEvent)[vs[1].(int)]
	}).(AlertEventOutput)
}

type AlertEventMapOutput struct{ *pulumi.OutputState }

func (AlertEventMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AlertEvent)(nil))
}

func (o AlertEventMapOutput) ToAlertEventMapOutput() AlertEventMapOutput {
	return o
}

func (o AlertEventMapOutput) ToAlertEventMapOutputWithContext(ctx context.Context) AlertEventMapOutput {
	return o
}

func (o AlertEventMapOutput) MapIndex(k pulumi.StringInput) AlertEventOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AlertEvent {
		return vs[0].(map[string]AlertEvent)[vs[1].(string)]
	}).(AlertEventOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertEventOutput{})
	pulumi.RegisterOutputType(AlertEventPtrOutput{})
	pulumi.RegisterOutputType(AlertEventArrayOutput{})
	pulumi.RegisterOutputType(AlertEventMapOutput{})
}
