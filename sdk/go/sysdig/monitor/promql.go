// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Promql struct {
	pulumi.CustomResourceState

	Capture               PromqlCapturePtrOutput            `pulumi:"capture"`
	CustomNotification    PromqlCustomNotificationPtrOutput `pulumi:"customNotification"`
	Description           pulumi.StringPtrOutput            `pulumi:"description"`
	Enabled               pulumi.BoolPtrOutput              `pulumi:"enabled"`
	Name                  pulumi.StringOutput               `pulumi:"name"`
	NotificationChannels  pulumi.IntArrayOutput             `pulumi:"notificationChannels"`
	Promql                pulumi.StringOutput               `pulumi:"promql"`
	RenotificationMinutes pulumi.IntPtrOutput               `pulumi:"renotificationMinutes"`
	Scope                 pulumi.StringPtrOutput            `pulumi:"scope"`
	Severity              pulumi.IntPtrOutput               `pulumi:"severity"`
	Team                  pulumi.IntOutput                  `pulumi:"team"`
	TriggerAfterMinutes   pulumi.IntOutput                  `pulumi:"triggerAfterMinutes"`
	Version               pulumi.IntOutput                  `pulumi:"version"`
}

// NewPromql registers a new resource with the given unique name, arguments, and options.
func NewPromql(ctx *pulumi.Context,
	name string, args *PromqlArgs, opts ...pulumi.ResourceOption) (*Promql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Promql == nil {
		return nil, errors.New("invalid value for required argument 'Promql'")
	}
	if args.TriggerAfterMinutes == nil {
		return nil, errors.New("invalid value for required argument 'TriggerAfterMinutes'")
	}
	var resource Promql
	err := ctx.RegisterResource("sysdig:Monitor/promql:Promql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPromql gets an existing Promql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPromql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PromqlState, opts ...pulumi.ResourceOption) (*Promql, error) {
	var resource Promql
	err := ctx.ReadResource("sysdig:Monitor/promql:Promql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Promql resources.
type promqlState struct {
	Capture               *PromqlCapture            `pulumi:"capture"`
	CustomNotification    *PromqlCustomNotification `pulumi:"customNotification"`
	Description           *string                   `pulumi:"description"`
	Enabled               *bool                     `pulumi:"enabled"`
	Name                  *string                   `pulumi:"name"`
	NotificationChannels  []int                     `pulumi:"notificationChannels"`
	Promql                *string                   `pulumi:"promql"`
	RenotificationMinutes *int                      `pulumi:"renotificationMinutes"`
	Scope                 *string                   `pulumi:"scope"`
	Severity              *int                      `pulumi:"severity"`
	Team                  *int                      `pulumi:"team"`
	TriggerAfterMinutes   *int                      `pulumi:"triggerAfterMinutes"`
	Version               *int                      `pulumi:"version"`
}

type PromqlState struct {
	Capture               PromqlCapturePtrInput
	CustomNotification    PromqlCustomNotificationPtrInput
	Description           pulumi.StringPtrInput
	Enabled               pulumi.BoolPtrInput
	Name                  pulumi.StringPtrInput
	NotificationChannels  pulumi.IntArrayInput
	Promql                pulumi.StringPtrInput
	RenotificationMinutes pulumi.IntPtrInput
	Scope                 pulumi.StringPtrInput
	Severity              pulumi.IntPtrInput
	Team                  pulumi.IntPtrInput
	TriggerAfterMinutes   pulumi.IntPtrInput
	Version               pulumi.IntPtrInput
}

func (PromqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*promqlState)(nil)).Elem()
}

type promqlArgs struct {
	Capture               *PromqlCapture            `pulumi:"capture"`
	CustomNotification    *PromqlCustomNotification `pulumi:"customNotification"`
	Description           *string                   `pulumi:"description"`
	Enabled               *bool                     `pulumi:"enabled"`
	Name                  *string                   `pulumi:"name"`
	NotificationChannels  []int                     `pulumi:"notificationChannels"`
	Promql                string                    `pulumi:"promql"`
	RenotificationMinutes *int                      `pulumi:"renotificationMinutes"`
	Scope                 *string                   `pulumi:"scope"`
	Severity              *int                      `pulumi:"severity"`
	TriggerAfterMinutes   int                       `pulumi:"triggerAfterMinutes"`
}

// The set of arguments for constructing a Promql resource.
type PromqlArgs struct {
	Capture               PromqlCapturePtrInput
	CustomNotification    PromqlCustomNotificationPtrInput
	Description           pulumi.StringPtrInput
	Enabled               pulumi.BoolPtrInput
	Name                  pulumi.StringPtrInput
	NotificationChannels  pulumi.IntArrayInput
	Promql                pulumi.StringInput
	RenotificationMinutes pulumi.IntPtrInput
	Scope                 pulumi.StringPtrInput
	Severity              pulumi.IntPtrInput
	TriggerAfterMinutes   pulumi.IntInput
}

func (PromqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*promqlArgs)(nil)).Elem()
}

type PromqlInput interface {
	pulumi.Input

	ToPromqlOutput() PromqlOutput
	ToPromqlOutputWithContext(ctx context.Context) PromqlOutput
}

func (*Promql) ElementType() reflect.Type {
	return reflect.TypeOf((*Promql)(nil))
}

func (i *Promql) ToPromqlOutput() PromqlOutput {
	return i.ToPromqlOutputWithContext(context.Background())
}

func (i *Promql) ToPromqlOutputWithContext(ctx context.Context) PromqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromqlOutput)
}

func (i *Promql) ToPromqlPtrOutput() PromqlPtrOutput {
	return i.ToPromqlPtrOutputWithContext(context.Background())
}

func (i *Promql) ToPromqlPtrOutputWithContext(ctx context.Context) PromqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromqlPtrOutput)
}

type PromqlPtrInput interface {
	pulumi.Input

	ToPromqlPtrOutput() PromqlPtrOutput
	ToPromqlPtrOutputWithContext(ctx context.Context) PromqlPtrOutput
}

type promqlPtrType PromqlArgs

func (*promqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Promql)(nil))
}

func (i *promqlPtrType) ToPromqlPtrOutput() PromqlPtrOutput {
	return i.ToPromqlPtrOutputWithContext(context.Background())
}

func (i *promqlPtrType) ToPromqlPtrOutputWithContext(ctx context.Context) PromqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromqlPtrOutput)
}

// PromqlArrayInput is an input type that accepts PromqlArray and PromqlArrayOutput values.
// You can construct a concrete instance of `PromqlArrayInput` via:
//
//          PromqlArray{ PromqlArgs{...} }
type PromqlArrayInput interface {
	pulumi.Input

	ToPromqlArrayOutput() PromqlArrayOutput
	ToPromqlArrayOutputWithContext(context.Context) PromqlArrayOutput
}

type PromqlArray []PromqlInput

func (PromqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Promql)(nil)).Elem()
}

func (i PromqlArray) ToPromqlArrayOutput() PromqlArrayOutput {
	return i.ToPromqlArrayOutputWithContext(context.Background())
}

func (i PromqlArray) ToPromqlArrayOutputWithContext(ctx context.Context) PromqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromqlArrayOutput)
}

// PromqlMapInput is an input type that accepts PromqlMap and PromqlMapOutput values.
// You can construct a concrete instance of `PromqlMapInput` via:
//
//          PromqlMap{ "key": PromqlArgs{...} }
type PromqlMapInput interface {
	pulumi.Input

	ToPromqlMapOutput() PromqlMapOutput
	ToPromqlMapOutputWithContext(context.Context) PromqlMapOutput
}

type PromqlMap map[string]PromqlInput

func (PromqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Promql)(nil)).Elem()
}

func (i PromqlMap) ToPromqlMapOutput() PromqlMapOutput {
	return i.ToPromqlMapOutputWithContext(context.Background())
}

func (i PromqlMap) ToPromqlMapOutputWithContext(ctx context.Context) PromqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromqlMapOutput)
}

type PromqlOutput struct{ *pulumi.OutputState }

func (PromqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Promql)(nil))
}

func (o PromqlOutput) ToPromqlOutput() PromqlOutput {
	return o
}

func (o PromqlOutput) ToPromqlOutputWithContext(ctx context.Context) PromqlOutput {
	return o
}

func (o PromqlOutput) ToPromqlPtrOutput() PromqlPtrOutput {
	return o.ToPromqlPtrOutputWithContext(context.Background())
}

func (o PromqlOutput) ToPromqlPtrOutputWithContext(ctx context.Context) PromqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Promql) *Promql {
		return &v
	}).(PromqlPtrOutput)
}

type PromqlPtrOutput struct{ *pulumi.OutputState }

func (PromqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Promql)(nil))
}

func (o PromqlPtrOutput) ToPromqlPtrOutput() PromqlPtrOutput {
	return o
}

func (o PromqlPtrOutput) ToPromqlPtrOutputWithContext(ctx context.Context) PromqlPtrOutput {
	return o
}

func (o PromqlPtrOutput) Elem() PromqlOutput {
	return o.ApplyT(func(v *Promql) Promql {
		if v != nil {
			return *v
		}
		var ret Promql
		return ret
	}).(PromqlOutput)
}

type PromqlArrayOutput struct{ *pulumi.OutputState }

func (PromqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Promql)(nil))
}

func (o PromqlArrayOutput) ToPromqlArrayOutput() PromqlArrayOutput {
	return o
}

func (o PromqlArrayOutput) ToPromqlArrayOutputWithContext(ctx context.Context) PromqlArrayOutput {
	return o
}

func (o PromqlArrayOutput) Index(i pulumi.IntInput) PromqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Promql {
		return vs[0].([]Promql)[vs[1].(int)]
	}).(PromqlOutput)
}

type PromqlMapOutput struct{ *pulumi.OutputState }

func (PromqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Promql)(nil))
}

func (o PromqlMapOutput) ToPromqlMapOutput() PromqlMapOutput {
	return o
}

func (o PromqlMapOutput) ToPromqlMapOutputWithContext(ctx context.Context) PromqlMapOutput {
	return o
}

func (o PromqlMapOutput) MapIndex(k pulumi.StringInput) PromqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Promql {
		return vs[0].(map[string]Promql)[vs[1].(string)]
	}).(PromqlOutput)
}

func init() {
	pulumi.RegisterOutputType(PromqlOutput{})
	pulumi.RegisterOutputType(PromqlPtrOutput{})
	pulumi.RegisterOutputType(PromqlArrayOutput{})
	pulumi.RegisterOutputType(PromqlMapOutput{})
}
