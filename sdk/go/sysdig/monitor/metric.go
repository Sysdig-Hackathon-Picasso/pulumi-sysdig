// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Metric struct {
	pulumi.CustomResourceState

	Capture               MetricCapturePtrOutput            `pulumi:"capture"`
	CustomNotification    MetricCustomNotificationPtrOutput `pulumi:"customNotification"`
	Description           pulumi.StringPtrOutput            `pulumi:"description"`
	Enabled               pulumi.BoolPtrOutput              `pulumi:"enabled"`
	Metric                pulumi.StringOutput               `pulumi:"metric"`
	MultipleAlertsBies    pulumi.StringArrayOutput          `pulumi:"multipleAlertsBies"`
	Name                  pulumi.StringOutput               `pulumi:"name"`
	NotificationChannels  pulumi.IntArrayOutput             `pulumi:"notificationChannels"`
	RenotificationMinutes pulumi.IntPtrOutput               `pulumi:"renotificationMinutes"`
	Scope                 pulumi.StringPtrOutput            `pulumi:"scope"`
	Severity              pulumi.IntPtrOutput               `pulumi:"severity"`
	Team                  pulumi.IntOutput                  `pulumi:"team"`
	TriggerAfterMinutes   pulumi.IntOutput                  `pulumi:"triggerAfterMinutes"`
	Version               pulumi.IntOutput                  `pulumi:"version"`
}

// NewMetric registers a new resource with the given unique name, arguments, and options.
func NewMetric(ctx *pulumi.Context,
	name string, args *MetricArgs, opts ...pulumi.ResourceOption) (*Metric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.TriggerAfterMinutes == nil {
		return nil, errors.New("invalid value for required argument 'TriggerAfterMinutes'")
	}
	var resource Metric
	err := ctx.RegisterResource("sysdig:Monitor/metric:Metric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetric gets an existing Metric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricState, opts ...pulumi.ResourceOption) (*Metric, error) {
	var resource Metric
	err := ctx.ReadResource("sysdig:Monitor/metric:Metric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Metric resources.
type metricState struct {
	Capture               *MetricCapture            `pulumi:"capture"`
	CustomNotification    *MetricCustomNotification `pulumi:"customNotification"`
	Description           *string                   `pulumi:"description"`
	Enabled               *bool                     `pulumi:"enabled"`
	Metric                *string                   `pulumi:"metric"`
	MultipleAlertsBies    []string                  `pulumi:"multipleAlertsBies"`
	Name                  *string                   `pulumi:"name"`
	NotificationChannels  []int                     `pulumi:"notificationChannels"`
	RenotificationMinutes *int                      `pulumi:"renotificationMinutes"`
	Scope                 *string                   `pulumi:"scope"`
	Severity              *int                      `pulumi:"severity"`
	Team                  *int                      `pulumi:"team"`
	TriggerAfterMinutes   *int                      `pulumi:"triggerAfterMinutes"`
	Version               *int                      `pulumi:"version"`
}

type MetricState struct {
	Capture               MetricCapturePtrInput
	CustomNotification    MetricCustomNotificationPtrInput
	Description           pulumi.StringPtrInput
	Enabled               pulumi.BoolPtrInput
	Metric                pulumi.StringPtrInput
	MultipleAlertsBies    pulumi.StringArrayInput
	Name                  pulumi.StringPtrInput
	NotificationChannels  pulumi.IntArrayInput
	RenotificationMinutes pulumi.IntPtrInput
	Scope                 pulumi.StringPtrInput
	Severity              pulumi.IntPtrInput
	Team                  pulumi.IntPtrInput
	TriggerAfterMinutes   pulumi.IntPtrInput
	Version               pulumi.IntPtrInput
}

func (MetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricState)(nil)).Elem()
}

type metricArgs struct {
	Capture               *MetricCapture            `pulumi:"capture"`
	CustomNotification    *MetricCustomNotification `pulumi:"customNotification"`
	Description           *string                   `pulumi:"description"`
	Enabled               *bool                     `pulumi:"enabled"`
	Metric                string                    `pulumi:"metric"`
	MultipleAlertsBies    []string                  `pulumi:"multipleAlertsBies"`
	Name                  *string                   `pulumi:"name"`
	NotificationChannels  []int                     `pulumi:"notificationChannels"`
	RenotificationMinutes *int                      `pulumi:"renotificationMinutes"`
	Scope                 *string                   `pulumi:"scope"`
	Severity              *int                      `pulumi:"severity"`
	TriggerAfterMinutes   int                       `pulumi:"triggerAfterMinutes"`
}

// The set of arguments for constructing a Metric resource.
type MetricArgs struct {
	Capture               MetricCapturePtrInput
	CustomNotification    MetricCustomNotificationPtrInput
	Description           pulumi.StringPtrInput
	Enabled               pulumi.BoolPtrInput
	Metric                pulumi.StringInput
	MultipleAlertsBies    pulumi.StringArrayInput
	Name                  pulumi.StringPtrInput
	NotificationChannels  pulumi.IntArrayInput
	RenotificationMinutes pulumi.IntPtrInput
	Scope                 pulumi.StringPtrInput
	Severity              pulumi.IntPtrInput
	TriggerAfterMinutes   pulumi.IntInput
}

func (MetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricArgs)(nil)).Elem()
}

type MetricInput interface {
	pulumi.Input

	ToMetricOutput() MetricOutput
	ToMetricOutputWithContext(ctx context.Context) MetricOutput
}

func (*Metric) ElementType() reflect.Type {
	return reflect.TypeOf((*Metric)(nil))
}

func (i *Metric) ToMetricOutput() MetricOutput {
	return i.ToMetricOutputWithContext(context.Background())
}

func (i *Metric) ToMetricOutputWithContext(ctx context.Context) MetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricOutput)
}

func (i *Metric) ToMetricPtrOutput() MetricPtrOutput {
	return i.ToMetricPtrOutputWithContext(context.Background())
}

func (i *Metric) ToMetricPtrOutputWithContext(ctx context.Context) MetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricPtrOutput)
}

type MetricPtrInput interface {
	pulumi.Input

	ToMetricPtrOutput() MetricPtrOutput
	ToMetricPtrOutputWithContext(ctx context.Context) MetricPtrOutput
}

type metricPtrType MetricArgs

func (*metricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Metric)(nil))
}

func (i *metricPtrType) ToMetricPtrOutput() MetricPtrOutput {
	return i.ToMetricPtrOutputWithContext(context.Background())
}

func (i *metricPtrType) ToMetricPtrOutputWithContext(ctx context.Context) MetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricPtrOutput)
}

// MetricArrayInput is an input type that accepts MetricArray and MetricArrayOutput values.
// You can construct a concrete instance of `MetricArrayInput` via:
//
//          MetricArray{ MetricArgs{...} }
type MetricArrayInput interface {
	pulumi.Input

	ToMetricArrayOutput() MetricArrayOutput
	ToMetricArrayOutputWithContext(context.Context) MetricArrayOutput
}

type MetricArray []MetricInput

func (MetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Metric)(nil)).Elem()
}

func (i MetricArray) ToMetricArrayOutput() MetricArrayOutput {
	return i.ToMetricArrayOutputWithContext(context.Background())
}

func (i MetricArray) ToMetricArrayOutputWithContext(ctx context.Context) MetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricArrayOutput)
}

// MetricMapInput is an input type that accepts MetricMap and MetricMapOutput values.
// You can construct a concrete instance of `MetricMapInput` via:
//
//          MetricMap{ "key": MetricArgs{...} }
type MetricMapInput interface {
	pulumi.Input

	ToMetricMapOutput() MetricMapOutput
	ToMetricMapOutputWithContext(context.Context) MetricMapOutput
}

type MetricMap map[string]MetricInput

func (MetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Metric)(nil)).Elem()
}

func (i MetricMap) ToMetricMapOutput() MetricMapOutput {
	return i.ToMetricMapOutputWithContext(context.Background())
}

func (i MetricMap) ToMetricMapOutputWithContext(ctx context.Context) MetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMapOutput)
}

type MetricOutput struct{ *pulumi.OutputState }

func (MetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Metric)(nil))
}

func (o MetricOutput) ToMetricOutput() MetricOutput {
	return o
}

func (o MetricOutput) ToMetricOutputWithContext(ctx context.Context) MetricOutput {
	return o
}

func (o MetricOutput) ToMetricPtrOutput() MetricPtrOutput {
	return o.ToMetricPtrOutputWithContext(context.Background())
}

func (o MetricOutput) ToMetricPtrOutputWithContext(ctx context.Context) MetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Metric) *Metric {
		return &v
	}).(MetricPtrOutput)
}

type MetricPtrOutput struct{ *pulumi.OutputState }

func (MetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Metric)(nil))
}

func (o MetricPtrOutput) ToMetricPtrOutput() MetricPtrOutput {
	return o
}

func (o MetricPtrOutput) ToMetricPtrOutputWithContext(ctx context.Context) MetricPtrOutput {
	return o
}

func (o MetricPtrOutput) Elem() MetricOutput {
	return o.ApplyT(func(v *Metric) Metric {
		if v != nil {
			return *v
		}
		var ret Metric
		return ret
	}).(MetricOutput)
}

type MetricArrayOutput struct{ *pulumi.OutputState }

func (MetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Metric)(nil))
}

func (o MetricArrayOutput) ToMetricArrayOutput() MetricArrayOutput {
	return o
}

func (o MetricArrayOutput) ToMetricArrayOutputWithContext(ctx context.Context) MetricArrayOutput {
	return o
}

func (o MetricArrayOutput) Index(i pulumi.IntInput) MetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Metric {
		return vs[0].([]Metric)[vs[1].(int)]
	}).(MetricOutput)
}

type MetricMapOutput struct{ *pulumi.OutputState }

func (MetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Metric)(nil))
}

func (o MetricMapOutput) ToMetricMapOutput() MetricMapOutput {
	return o
}

func (o MetricMapOutput) ToMetricMapOutputWithContext(ctx context.Context) MetricMapOutput {
	return o
}

func (o MetricMapOutput) MapIndex(k pulumi.StringInput) MetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Metric {
		return vs[0].(map[string]Metric)[vs[1].(string)]
	}).(MetricOutput)
}

func init() {
	pulumi.RegisterOutputType(MetricOutput{})
	pulumi.RegisterOutputType(MetricPtrOutput{})
	pulumi.RegisterOutputType(MetricArrayOutput{})
	pulumi.RegisterOutputType(MetricMapOutput{})
}
