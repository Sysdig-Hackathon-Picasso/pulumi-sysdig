// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Anomaly Monitor alerts can be imported using the alert ID, e.g.
//
// ```sh
//  $ pulumi import sysdig:Monitor/alertAnomaly:AlertAnomaly example 12345
// ```
type AlertAnomaly struct {
	pulumi.CustomResourceState

	// Enables the creation of a capture file of the syscalls during the event.
	Capture AlertAnomalyCapturePtrOutput `pulumi:"capture"`
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification AlertAnomalyCustomNotificationPtrOutput `pulumi:"customNotification"`
	// The description of Monitor alert.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Array of metrics to monitor and alert on. Example: `["cpu.used.percent", "cpu.cores.used", "memory.bytes.used", "fs.used.percent", "thread.count", "net.request.count.in"]`.
	Monitors pulumi.StringArrayOutput `pulumi:"monitors"`
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies pulumi.StringArrayOutput `pulumi:"multipleAlertsBies"`
	// The name of the Monitor alert. It must be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels pulumi.IntArrayOutput `pulumi:"notificationChannels"`
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes pulumi.IntPtrOutput `pulumi:"renotificationMinutes"`
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity pulumi.IntPtrOutput `pulumi:"severity"`
	// Team ID that owns the alert.
	Team pulumi.IntOutput `pulumi:"team"`
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes pulumi.IntOutput `pulumi:"triggerAfterMinutes"`
	// Current version of the resource in Sysdig Monitor.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewAlertAnomaly registers a new resource with the given unique name, arguments, and options.
func NewAlertAnomaly(ctx *pulumi.Context,
	name string, args *AlertAnomalyArgs, opts ...pulumi.ResourceOption) (*AlertAnomaly, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Monitors == nil {
		return nil, errors.New("invalid value for required argument 'Monitors'")
	}
	if args.TriggerAfterMinutes == nil {
		return nil, errors.New("invalid value for required argument 'TriggerAfterMinutes'")
	}
	var resource AlertAnomaly
	err := ctx.RegisterResource("sysdig:Monitor/alertAnomaly:AlertAnomaly", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertAnomaly gets an existing AlertAnomaly resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertAnomaly(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertAnomalyState, opts ...pulumi.ResourceOption) (*AlertAnomaly, error) {
	var resource AlertAnomaly
	err := ctx.ReadResource("sysdig:Monitor/alertAnomaly:AlertAnomaly", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertAnomaly resources.
type alertAnomalyState struct {
	// Enables the creation of a capture file of the syscalls during the event.
	Capture *AlertAnomalyCapture `pulumi:"capture"`
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification *AlertAnomalyCustomNotification `pulumi:"customNotification"`
	// The description of Monitor alert.
	Description *string `pulumi:"description"`
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled *bool `pulumi:"enabled"`
	// Array of metrics to monitor and alert on. Example: `["cpu.used.percent", "cpu.cores.used", "memory.bytes.used", "fs.used.percent", "thread.count", "net.request.count.in"]`.
	Monitors []string `pulumi:"monitors"`
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies []string `pulumi:"multipleAlertsBies"`
	// The name of the Monitor alert. It must be unique.
	Name *string `pulumi:"name"`
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels []int `pulumi:"notificationChannels"`
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes *int `pulumi:"renotificationMinutes"`
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope *string `pulumi:"scope"`
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity *int `pulumi:"severity"`
	// Team ID that owns the alert.
	Team *int `pulumi:"team"`
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes *int `pulumi:"triggerAfterMinutes"`
	// Current version of the resource in Sysdig Monitor.
	Version *int `pulumi:"version"`
}

type AlertAnomalyState struct {
	// Enables the creation of a capture file of the syscalls during the event.
	Capture AlertAnomalyCapturePtrInput
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification AlertAnomalyCustomNotificationPtrInput
	// The description of Monitor alert.
	Description pulumi.StringPtrInput
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled pulumi.BoolPtrInput
	// Array of metrics to monitor and alert on. Example: `["cpu.used.percent", "cpu.cores.used", "memory.bytes.used", "fs.used.percent", "thread.count", "net.request.count.in"]`.
	Monitors pulumi.StringArrayInput
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies pulumi.StringArrayInput
	// The name of the Monitor alert. It must be unique.
	Name pulumi.StringPtrInput
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels pulumi.IntArrayInput
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes pulumi.IntPtrInput
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope pulumi.StringPtrInput
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity pulumi.IntPtrInput
	// Team ID that owns the alert.
	Team pulumi.IntPtrInput
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes pulumi.IntPtrInput
	// Current version of the resource in Sysdig Monitor.
	Version pulumi.IntPtrInput
}

func (AlertAnomalyState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertAnomalyState)(nil)).Elem()
}

type alertAnomalyArgs struct {
	// Enables the creation of a capture file of the syscalls during the event.
	Capture *AlertAnomalyCapture `pulumi:"capture"`
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification *AlertAnomalyCustomNotification `pulumi:"customNotification"`
	// The description of Monitor alert.
	Description *string `pulumi:"description"`
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled *bool `pulumi:"enabled"`
	// Array of metrics to monitor and alert on. Example: `["cpu.used.percent", "cpu.cores.used", "memory.bytes.used", "fs.used.percent", "thread.count", "net.request.count.in"]`.
	Monitors []string `pulumi:"monitors"`
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies []string `pulumi:"multipleAlertsBies"`
	// The name of the Monitor alert. It must be unique.
	Name *string `pulumi:"name"`
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels []int `pulumi:"notificationChannels"`
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes *int `pulumi:"renotificationMinutes"`
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope *string `pulumi:"scope"`
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity *int `pulumi:"severity"`
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes int `pulumi:"triggerAfterMinutes"`
}

// The set of arguments for constructing a AlertAnomaly resource.
type AlertAnomalyArgs struct {
	// Enables the creation of a capture file of the syscalls during the event.
	Capture AlertAnomalyCapturePtrInput
	// Allows to define a custom notification title, prepend and append text.
	CustomNotification AlertAnomalyCustomNotificationPtrInput
	// The description of Monitor alert.
	Description pulumi.StringPtrInput
	// Boolean that defines if the alert is enabled or not. Defaults to true.
	Enabled pulumi.BoolPtrInput
	// Array of metrics to monitor and alert on. Example: `["cpu.used.percent", "cpu.cores.used", "memory.bytes.used", "fs.used.percent", "thread.count", "net.request.count.in"]`.
	Monitors pulumi.StringArrayInput
	// List of segments to trigger a separate alert on. Example: `["kubernetes.cluster.name", "kubernetes.namespace.name"]`.
	MultipleAlertsBies pulumi.StringArrayInput
	// The name of the Monitor alert. It must be unique.
	Name pulumi.StringPtrInput
	// List of notification channel IDs where an alert must be sent to once fired.
	NotificationChannels pulumi.IntArrayInput
	// Number of minutes for the alert to re-notify until the status is solved.
	RenotificationMinutes pulumi.IntPtrInput
	// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
	Scope pulumi.StringPtrInput
	// Severity of the Monitor alert. It must be a value between 0 and 7,
	// with 0 being the most critical and 7 the less critical. Defaults to 4.
	Severity pulumi.IntPtrInput
	// Threshold of time for the status to stabilize until the alert is fired.
	TriggerAfterMinutes pulumi.IntInput
}

func (AlertAnomalyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertAnomalyArgs)(nil)).Elem()
}

type AlertAnomalyInput interface {
	pulumi.Input

	ToAlertAnomalyOutput() AlertAnomalyOutput
	ToAlertAnomalyOutputWithContext(ctx context.Context) AlertAnomalyOutput
}

func (*AlertAnomaly) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAnomaly)(nil))
}

func (i *AlertAnomaly) ToAlertAnomalyOutput() AlertAnomalyOutput {
	return i.ToAlertAnomalyOutputWithContext(context.Background())
}

func (i *AlertAnomaly) ToAlertAnomalyOutputWithContext(ctx context.Context) AlertAnomalyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAnomalyOutput)
}

func (i *AlertAnomaly) ToAlertAnomalyPtrOutput() AlertAnomalyPtrOutput {
	return i.ToAlertAnomalyPtrOutputWithContext(context.Background())
}

func (i *AlertAnomaly) ToAlertAnomalyPtrOutputWithContext(ctx context.Context) AlertAnomalyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAnomalyPtrOutput)
}

type AlertAnomalyPtrInput interface {
	pulumi.Input

	ToAlertAnomalyPtrOutput() AlertAnomalyPtrOutput
	ToAlertAnomalyPtrOutputWithContext(ctx context.Context) AlertAnomalyPtrOutput
}

type alertAnomalyPtrType AlertAnomalyArgs

func (*alertAnomalyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertAnomaly)(nil))
}

func (i *alertAnomalyPtrType) ToAlertAnomalyPtrOutput() AlertAnomalyPtrOutput {
	return i.ToAlertAnomalyPtrOutputWithContext(context.Background())
}

func (i *alertAnomalyPtrType) ToAlertAnomalyPtrOutputWithContext(ctx context.Context) AlertAnomalyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAnomalyPtrOutput)
}

// AlertAnomalyArrayInput is an input type that accepts AlertAnomalyArray and AlertAnomalyArrayOutput values.
// You can construct a concrete instance of `AlertAnomalyArrayInput` via:
//
//          AlertAnomalyArray{ AlertAnomalyArgs{...} }
type AlertAnomalyArrayInput interface {
	pulumi.Input

	ToAlertAnomalyArrayOutput() AlertAnomalyArrayOutput
	ToAlertAnomalyArrayOutputWithContext(context.Context) AlertAnomalyArrayOutput
}

type AlertAnomalyArray []AlertAnomalyInput

func (AlertAnomalyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertAnomaly)(nil)).Elem()
}

func (i AlertAnomalyArray) ToAlertAnomalyArrayOutput() AlertAnomalyArrayOutput {
	return i.ToAlertAnomalyArrayOutputWithContext(context.Background())
}

func (i AlertAnomalyArray) ToAlertAnomalyArrayOutputWithContext(ctx context.Context) AlertAnomalyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAnomalyArrayOutput)
}

// AlertAnomalyMapInput is an input type that accepts AlertAnomalyMap and AlertAnomalyMapOutput values.
// You can construct a concrete instance of `AlertAnomalyMapInput` via:
//
//          AlertAnomalyMap{ "key": AlertAnomalyArgs{...} }
type AlertAnomalyMapInput interface {
	pulumi.Input

	ToAlertAnomalyMapOutput() AlertAnomalyMapOutput
	ToAlertAnomalyMapOutputWithContext(context.Context) AlertAnomalyMapOutput
}

type AlertAnomalyMap map[string]AlertAnomalyInput

func (AlertAnomalyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertAnomaly)(nil)).Elem()
}

func (i AlertAnomalyMap) ToAlertAnomalyMapOutput() AlertAnomalyMapOutput {
	return i.ToAlertAnomalyMapOutputWithContext(context.Background())
}

func (i AlertAnomalyMap) ToAlertAnomalyMapOutputWithContext(ctx context.Context) AlertAnomalyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAnomalyMapOutput)
}

type AlertAnomalyOutput struct{ *pulumi.OutputState }

func (AlertAnomalyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAnomaly)(nil))
}

func (o AlertAnomalyOutput) ToAlertAnomalyOutput() AlertAnomalyOutput {
	return o
}

func (o AlertAnomalyOutput) ToAlertAnomalyOutputWithContext(ctx context.Context) AlertAnomalyOutput {
	return o
}

func (o AlertAnomalyOutput) ToAlertAnomalyPtrOutput() AlertAnomalyPtrOutput {
	return o.ToAlertAnomalyPtrOutputWithContext(context.Background())
}

func (o AlertAnomalyOutput) ToAlertAnomalyPtrOutputWithContext(ctx context.Context) AlertAnomalyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertAnomaly) *AlertAnomaly {
		return &v
	}).(AlertAnomalyPtrOutput)
}

type AlertAnomalyPtrOutput struct{ *pulumi.OutputState }

func (AlertAnomalyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertAnomaly)(nil))
}

func (o AlertAnomalyPtrOutput) ToAlertAnomalyPtrOutput() AlertAnomalyPtrOutput {
	return o
}

func (o AlertAnomalyPtrOutput) ToAlertAnomalyPtrOutputWithContext(ctx context.Context) AlertAnomalyPtrOutput {
	return o
}

func (o AlertAnomalyPtrOutput) Elem() AlertAnomalyOutput {
	return o.ApplyT(func(v *AlertAnomaly) AlertAnomaly {
		if v != nil {
			return *v
		}
		var ret AlertAnomaly
		return ret
	}).(AlertAnomalyOutput)
}

type AlertAnomalyArrayOutput struct{ *pulumi.OutputState }

func (AlertAnomalyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertAnomaly)(nil))
}

func (o AlertAnomalyArrayOutput) ToAlertAnomalyArrayOutput() AlertAnomalyArrayOutput {
	return o
}

func (o AlertAnomalyArrayOutput) ToAlertAnomalyArrayOutputWithContext(ctx context.Context) AlertAnomalyArrayOutput {
	return o
}

func (o AlertAnomalyArrayOutput) Index(i pulumi.IntInput) AlertAnomalyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertAnomaly {
		return vs[0].([]AlertAnomaly)[vs[1].(int)]
	}).(AlertAnomalyOutput)
}

type AlertAnomalyMapOutput struct{ *pulumi.OutputState }

func (AlertAnomalyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AlertAnomaly)(nil))
}

func (o AlertAnomalyMapOutput) ToAlertAnomalyMapOutput() AlertAnomalyMapOutput {
	return o
}

func (o AlertAnomalyMapOutput) ToAlertAnomalyMapOutputWithContext(ctx context.Context) AlertAnomalyMapOutput {
	return o
}

func (o AlertAnomalyMapOutput) MapIndex(k pulumi.StringInput) AlertAnomalyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AlertAnomaly {
		return vs[0].(map[string]AlertAnomaly)[vs[1].(string)]
	}).(AlertAnomalyOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertAnomalyOutput{})
	pulumi.RegisterOutputType(AlertAnomalyPtrOutput{})
	pulumi.RegisterOutputType(AlertAnomalyArrayOutput{})
	pulumi.RegisterOutputType(AlertAnomalyMapOutput{})
}
