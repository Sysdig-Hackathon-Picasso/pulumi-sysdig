// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Team struct {
	pulumi.CustomResourceState

	CanSeeInfrastructureEvents pulumi.BoolPtrOutput      `pulumi:"canSeeInfrastructureEvents"`
	CanUseAwsData              pulumi.BoolPtrOutput      `pulumi:"canUseAwsData"`
	CanUseSysdigCapture        pulumi.BoolPtrOutput      `pulumi:"canUseSysdigCapture"`
	DefaultTeam                pulumi.BoolPtrOutput      `pulumi:"defaultTeam"`
	Description                pulumi.StringPtrOutput    `pulumi:"description"`
	Entrypoints                TeamEntrypointArrayOutput `pulumi:"entrypoints"`
	Filter                     pulumi.StringPtrOutput    `pulumi:"filter"`
	Name                       pulumi.StringOutput       `pulumi:"name"`
	ScopeBy                    pulumi.StringPtrOutput    `pulumi:"scopeBy"`
	Theme                      pulumi.StringPtrOutput    `pulumi:"theme"`
	UserRoles                  TeamUserRoleArrayOutput   `pulumi:"userRoles"`
	Version                    pulumi.IntOutput          `pulumi:"version"`
}

// NewTeam registers a new resource with the given unique name, arguments, and options.
func NewTeam(ctx *pulumi.Context,
	name string, args *TeamArgs, opts ...pulumi.ResourceOption) (*Team, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entrypoints == nil {
		return nil, errors.New("invalid value for required argument 'Entrypoints'")
	}
	var resource Team
	err := ctx.RegisterResource("sysdig:Monitor/team:Team", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeam gets an existing Team resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamState, opts ...pulumi.ResourceOption) (*Team, error) {
	var resource Team
	err := ctx.ReadResource("sysdig:Monitor/team:Team", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Team resources.
type teamState struct {
	CanSeeInfrastructureEvents *bool            `pulumi:"canSeeInfrastructureEvents"`
	CanUseAwsData              *bool            `pulumi:"canUseAwsData"`
	CanUseSysdigCapture        *bool            `pulumi:"canUseSysdigCapture"`
	DefaultTeam                *bool            `pulumi:"defaultTeam"`
	Description                *string          `pulumi:"description"`
	Entrypoints                []TeamEntrypoint `pulumi:"entrypoints"`
	Filter                     *string          `pulumi:"filter"`
	Name                       *string          `pulumi:"name"`
	ScopeBy                    *string          `pulumi:"scopeBy"`
	Theme                      *string          `pulumi:"theme"`
	UserRoles                  []TeamUserRole   `pulumi:"userRoles"`
	Version                    *int             `pulumi:"version"`
}

type TeamState struct {
	CanSeeInfrastructureEvents pulumi.BoolPtrInput
	CanUseAwsData              pulumi.BoolPtrInput
	CanUseSysdigCapture        pulumi.BoolPtrInput
	DefaultTeam                pulumi.BoolPtrInput
	Description                pulumi.StringPtrInput
	Entrypoints                TeamEntrypointArrayInput
	Filter                     pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	ScopeBy                    pulumi.StringPtrInput
	Theme                      pulumi.StringPtrInput
	UserRoles                  TeamUserRoleArrayInput
	Version                    pulumi.IntPtrInput
}

func (TeamState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamState)(nil)).Elem()
}

type teamArgs struct {
	CanSeeInfrastructureEvents *bool            `pulumi:"canSeeInfrastructureEvents"`
	CanUseAwsData              *bool            `pulumi:"canUseAwsData"`
	CanUseSysdigCapture        *bool            `pulumi:"canUseSysdigCapture"`
	DefaultTeam                *bool            `pulumi:"defaultTeam"`
	Description                *string          `pulumi:"description"`
	Entrypoints                []TeamEntrypoint `pulumi:"entrypoints"`
	Filter                     *string          `pulumi:"filter"`
	Name                       *string          `pulumi:"name"`
	ScopeBy                    *string          `pulumi:"scopeBy"`
	Theme                      *string          `pulumi:"theme"`
	UserRoles                  []TeamUserRole   `pulumi:"userRoles"`
}

// The set of arguments for constructing a Team resource.
type TeamArgs struct {
	CanSeeInfrastructureEvents pulumi.BoolPtrInput
	CanUseAwsData              pulumi.BoolPtrInput
	CanUseSysdigCapture        pulumi.BoolPtrInput
	DefaultTeam                pulumi.BoolPtrInput
	Description                pulumi.StringPtrInput
	Entrypoints                TeamEntrypointArrayInput
	Filter                     pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	ScopeBy                    pulumi.StringPtrInput
	Theme                      pulumi.StringPtrInput
	UserRoles                  TeamUserRoleArrayInput
}

func (TeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamArgs)(nil)).Elem()
}

type TeamInput interface {
	pulumi.Input

	ToTeamOutput() TeamOutput
	ToTeamOutputWithContext(ctx context.Context) TeamOutput
}

func (*Team) ElementType() reflect.Type {
	return reflect.TypeOf((*Team)(nil))
}

func (i *Team) ToTeamOutput() TeamOutput {
	return i.ToTeamOutputWithContext(context.Background())
}

func (i *Team) ToTeamOutputWithContext(ctx context.Context) TeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamOutput)
}

func (i *Team) ToTeamPtrOutput() TeamPtrOutput {
	return i.ToTeamPtrOutputWithContext(context.Background())
}

func (i *Team) ToTeamPtrOutputWithContext(ctx context.Context) TeamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPtrOutput)
}

type TeamPtrInput interface {
	pulumi.Input

	ToTeamPtrOutput() TeamPtrOutput
	ToTeamPtrOutputWithContext(ctx context.Context) TeamPtrOutput
}

type teamPtrType TeamArgs

func (*teamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Team)(nil))
}

func (i *teamPtrType) ToTeamPtrOutput() TeamPtrOutput {
	return i.ToTeamPtrOutputWithContext(context.Background())
}

func (i *teamPtrType) ToTeamPtrOutputWithContext(ctx context.Context) TeamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPtrOutput)
}

// TeamArrayInput is an input type that accepts TeamArray and TeamArrayOutput values.
// You can construct a concrete instance of `TeamArrayInput` via:
//
//          TeamArray{ TeamArgs{...} }
type TeamArrayInput interface {
	pulumi.Input

	ToTeamArrayOutput() TeamArrayOutput
	ToTeamArrayOutputWithContext(context.Context) TeamArrayOutput
}

type TeamArray []TeamInput

func (TeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Team)(nil)).Elem()
}

func (i TeamArray) ToTeamArrayOutput() TeamArrayOutput {
	return i.ToTeamArrayOutputWithContext(context.Background())
}

func (i TeamArray) ToTeamArrayOutputWithContext(ctx context.Context) TeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamArrayOutput)
}

// TeamMapInput is an input type that accepts TeamMap and TeamMapOutput values.
// You can construct a concrete instance of `TeamMapInput` via:
//
//          TeamMap{ "key": TeamArgs{...} }
type TeamMapInput interface {
	pulumi.Input

	ToTeamMapOutput() TeamMapOutput
	ToTeamMapOutputWithContext(context.Context) TeamMapOutput
}

type TeamMap map[string]TeamInput

func (TeamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Team)(nil)).Elem()
}

func (i TeamMap) ToTeamMapOutput() TeamMapOutput {
	return i.ToTeamMapOutputWithContext(context.Background())
}

func (i TeamMap) ToTeamMapOutputWithContext(ctx context.Context) TeamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMapOutput)
}

type TeamOutput struct{ *pulumi.OutputState }

func (TeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Team)(nil))
}

func (o TeamOutput) ToTeamOutput() TeamOutput {
	return o
}

func (o TeamOutput) ToTeamOutputWithContext(ctx context.Context) TeamOutput {
	return o
}

func (o TeamOutput) ToTeamPtrOutput() TeamPtrOutput {
	return o.ToTeamPtrOutputWithContext(context.Background())
}

func (o TeamOutput) ToTeamPtrOutputWithContext(ctx context.Context) TeamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Team) *Team {
		return &v
	}).(TeamPtrOutput)
}

type TeamPtrOutput struct{ *pulumi.OutputState }

func (TeamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Team)(nil))
}

func (o TeamPtrOutput) ToTeamPtrOutput() TeamPtrOutput {
	return o
}

func (o TeamPtrOutput) ToTeamPtrOutputWithContext(ctx context.Context) TeamPtrOutput {
	return o
}

func (o TeamPtrOutput) Elem() TeamOutput {
	return o.ApplyT(func(v *Team) Team {
		if v != nil {
			return *v
		}
		var ret Team
		return ret
	}).(TeamOutput)
}

type TeamArrayOutput struct{ *pulumi.OutputState }

func (TeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Team)(nil))
}

func (o TeamArrayOutput) ToTeamArrayOutput() TeamArrayOutput {
	return o
}

func (o TeamArrayOutput) ToTeamArrayOutputWithContext(ctx context.Context) TeamArrayOutput {
	return o
}

func (o TeamArrayOutput) Index(i pulumi.IntInput) TeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Team {
		return vs[0].([]Team)[vs[1].(int)]
	}).(TeamOutput)
}

type TeamMapOutput struct{ *pulumi.OutputState }

func (TeamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Team)(nil))
}

func (o TeamMapOutput) ToTeamMapOutput() TeamMapOutput {
	return o
}

func (o TeamMapOutput) ToTeamMapOutputWithContext(ctx context.Context) TeamMapOutput {
	return o
}

func (o TeamMapOutput) MapIndex(k pulumi.StringInput) TeamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Team {
		return vs[0].(map[string]Team)[vs[1].(string)]
	}).(TeamOutput)
}

func init() {
	pulumi.RegisterOutputType(TeamOutput{})
	pulumi.RegisterOutputType(TeamPtrOutput{})
	pulumi.RegisterOutputType(TeamArrayOutput{})
	pulumi.RegisterOutputType(TeamMapOutput{})
}
