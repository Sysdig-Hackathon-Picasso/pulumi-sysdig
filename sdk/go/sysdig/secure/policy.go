// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secure

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Secure runtime policies can be imported using the ID, e.g.
//
// ```sh
//  $ pulumi import sysdig:Secure/policy:Policy example 12345
// ```
type Policy struct {
	pulumi.CustomResourceState

	Actions PolicyActionArrayOutput `pulumi:"actions"`
	// The description of Secure policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// Will secure process with this rule?. By default this is true.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The name of the Secure policy. It must be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// IDs of the notification channels to send alerts to
	// when the policy is fired.
	NotificationChannels pulumi.IntArrayOutput `pulumi:"notificationChannels"`
	// Array with the name of the rules to match.
	RuleNames pulumi.StringArrayOutput `pulumi:"ruleNames"`
	// Limit appplication scope based in one expresion. For
	// example: "host.ip.private = \\"10.0.23.1\\"". By default the rule won't be scoped
	// and will target the entire infrastructure.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The severity of Secure policy. The accepted values
	// are: 0, 1, 2, 3 (High), 4, 5 (Medium), 6 (Low) and 7 (Info). The default value is 4 (Medium).
	Severity pulumi.IntPtrOutput `pulumi:"severity"`
	// Specifies the type of the runtime policy. Must be one of: `falco`, `listMatching`, `k8sAudit`, `awsCloudtrail`. By default it is `falco`.
	Type    pulumi.StringPtrOutput `pulumi:"type"`
	Version pulumi.IntOutput       `pulumi:"version"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	var resource Policy
	err := ctx.RegisterResource("sysdig:Secure/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("sysdig:Secure/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	Actions []PolicyAction `pulumi:"actions"`
	// The description of Secure policy.
	Description *string `pulumi:"description"`
	// Will secure process with this rule?. By default this is true.
	Enabled *bool `pulumi:"enabled"`
	// The name of the Secure policy. It must be unique.
	Name *string `pulumi:"name"`
	// IDs of the notification channels to send alerts to
	// when the policy is fired.
	NotificationChannels []int `pulumi:"notificationChannels"`
	// Array with the name of the rules to match.
	RuleNames []string `pulumi:"ruleNames"`
	// Limit appplication scope based in one expresion. For
	// example: "host.ip.private = \\"10.0.23.1\\"". By default the rule won't be scoped
	// and will target the entire infrastructure.
	Scope *string `pulumi:"scope"`
	// The severity of Secure policy. The accepted values
	// are: 0, 1, 2, 3 (High), 4, 5 (Medium), 6 (Low) and 7 (Info). The default value is 4 (Medium).
	Severity *int `pulumi:"severity"`
	// Specifies the type of the runtime policy. Must be one of: `falco`, `listMatching`, `k8sAudit`, `awsCloudtrail`. By default it is `falco`.
	Type    *string `pulumi:"type"`
	Version *int    `pulumi:"version"`
}

type PolicyState struct {
	Actions PolicyActionArrayInput
	// The description of Secure policy.
	Description pulumi.StringPtrInput
	// Will secure process with this rule?. By default this is true.
	Enabled pulumi.BoolPtrInput
	// The name of the Secure policy. It must be unique.
	Name pulumi.StringPtrInput
	// IDs of the notification channels to send alerts to
	// when the policy is fired.
	NotificationChannels pulumi.IntArrayInput
	// Array with the name of the rules to match.
	RuleNames pulumi.StringArrayInput
	// Limit appplication scope based in one expresion. For
	// example: "host.ip.private = \\"10.0.23.1\\"". By default the rule won't be scoped
	// and will target the entire infrastructure.
	Scope pulumi.StringPtrInput
	// The severity of Secure policy. The accepted values
	// are: 0, 1, 2, 3 (High), 4, 5 (Medium), 6 (Low) and 7 (Info). The default value is 4 (Medium).
	Severity pulumi.IntPtrInput
	// Specifies the type of the runtime policy. Must be one of: `falco`, `listMatching`, `k8sAudit`, `awsCloudtrail`. By default it is `falco`.
	Type    pulumi.StringPtrInput
	Version pulumi.IntPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	Actions []PolicyAction `pulumi:"actions"`
	// The description of Secure policy.
	Description string `pulumi:"description"`
	// Will secure process with this rule?. By default this is true.
	Enabled *bool `pulumi:"enabled"`
	// The name of the Secure policy. It must be unique.
	Name *string `pulumi:"name"`
	// IDs of the notification channels to send alerts to
	// when the policy is fired.
	NotificationChannels []int `pulumi:"notificationChannels"`
	// Array with the name of the rules to match.
	RuleNames []string `pulumi:"ruleNames"`
	// Limit appplication scope based in one expresion. For
	// example: "host.ip.private = \\"10.0.23.1\\"". By default the rule won't be scoped
	// and will target the entire infrastructure.
	Scope *string `pulumi:"scope"`
	// The severity of Secure policy. The accepted values
	// are: 0, 1, 2, 3 (High), 4, 5 (Medium), 6 (Low) and 7 (Info). The default value is 4 (Medium).
	Severity *int `pulumi:"severity"`
	// Specifies the type of the runtime policy. Must be one of: `falco`, `listMatching`, `k8sAudit`, `awsCloudtrail`. By default it is `falco`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	Actions PolicyActionArrayInput
	// The description of Secure policy.
	Description pulumi.StringInput
	// Will secure process with this rule?. By default this is true.
	Enabled pulumi.BoolPtrInput
	// The name of the Secure policy. It must be unique.
	Name pulumi.StringPtrInput
	// IDs of the notification channels to send alerts to
	// when the policy is fired.
	NotificationChannels pulumi.IntArrayInput
	// Array with the name of the rules to match.
	RuleNames pulumi.StringArrayInput
	// Limit appplication scope based in one expresion. For
	// example: "host.ip.private = \\"10.0.23.1\\"". By default the rule won't be scoped
	// and will target the entire infrastructure.
	Scope pulumi.StringPtrInput
	// The severity of Secure policy. The accepted values
	// are: 0, 1, 2, 3 (High), 4, 5 (Medium), 6 (Low) and 7 (Info). The default value is 4 (Medium).
	Severity pulumi.IntPtrInput
	// Specifies the type of the runtime policy. Must be one of: `falco`, `listMatching`, `k8sAudit`, `awsCloudtrail`. By default it is `falco`.
	Type pulumi.StringPtrInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil))
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i *Policy) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil))
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//          PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//          PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil))
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil))
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy {
		if v != nil {
			return *v
		}
		var ret Policy
		return ret
	}).(PolicyOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Policy)(nil))
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Policy {
		return vs[0].([]Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Policy)(nil))
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Policy {
		return vs[0].(map[string]Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}
