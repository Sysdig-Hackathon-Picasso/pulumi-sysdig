// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secure

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type List struct {
	pulumi.CustomResourceState

	Append  pulumi.BoolPtrOutput     `pulumi:"append"`
	Items   pulumi.StringArrayOutput `pulumi:"items"`
	Name    pulumi.StringOutput      `pulumi:"name"`
	Version pulumi.IntOutput         `pulumi:"version"`
}

// NewList registers a new resource with the given unique name, arguments, and options.
func NewList(ctx *pulumi.Context,
	name string, args *ListArgs, opts ...pulumi.ResourceOption) (*List, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	var resource List
	err := ctx.RegisterResource("sysdig:Secure/list:List", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetList gets an existing List resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListState, opts ...pulumi.ResourceOption) (*List, error) {
	var resource List
	err := ctx.ReadResource("sysdig:Secure/list:List", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering List resources.
type listState struct {
	Append  *bool    `pulumi:"append"`
	Items   []string `pulumi:"items"`
	Name    *string  `pulumi:"name"`
	Version *int     `pulumi:"version"`
}

type ListState struct {
	Append  pulumi.BoolPtrInput
	Items   pulumi.StringArrayInput
	Name    pulumi.StringPtrInput
	Version pulumi.IntPtrInput
}

func (ListState) ElementType() reflect.Type {
	return reflect.TypeOf((*listState)(nil)).Elem()
}

type listArgs struct {
	Append *bool    `pulumi:"append"`
	Items  []string `pulumi:"items"`
	Name   *string  `pulumi:"name"`
}

// The set of arguments for constructing a List resource.
type ListArgs struct {
	Append pulumi.BoolPtrInput
	Items  pulumi.StringArrayInput
	Name   pulumi.StringPtrInput
}

func (ListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listArgs)(nil)).Elem()
}

type ListInput interface {
	pulumi.Input

	ToListOutput() ListOutput
	ToListOutputWithContext(ctx context.Context) ListOutput
}

func (*List) ElementType() reflect.Type {
	return reflect.TypeOf((*List)(nil))
}

func (i *List) ToListOutput() ListOutput {
	return i.ToListOutputWithContext(context.Background())
}

func (i *List) ToListOutputWithContext(ctx context.Context) ListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListOutput)
}

func (i *List) ToListPtrOutput() ListPtrOutput {
	return i.ToListPtrOutputWithContext(context.Background())
}

func (i *List) ToListPtrOutputWithContext(ctx context.Context) ListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListPtrOutput)
}

type ListPtrInput interface {
	pulumi.Input

	ToListPtrOutput() ListPtrOutput
	ToListPtrOutputWithContext(ctx context.Context) ListPtrOutput
}

type listPtrType ListArgs

func (*listPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**List)(nil))
}

func (i *listPtrType) ToListPtrOutput() ListPtrOutput {
	return i.ToListPtrOutputWithContext(context.Background())
}

func (i *listPtrType) ToListPtrOutputWithContext(ctx context.Context) ListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListPtrOutput)
}

// ListArrayInput is an input type that accepts ListArray and ListArrayOutput values.
// You can construct a concrete instance of `ListArrayInput` via:
//
//          ListArray{ ListArgs{...} }
type ListArrayInput interface {
	pulumi.Input

	ToListArrayOutput() ListArrayOutput
	ToListArrayOutputWithContext(context.Context) ListArrayOutput
}

type ListArray []ListInput

func (ListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*List)(nil)).Elem()
}

func (i ListArray) ToListArrayOutput() ListArrayOutput {
	return i.ToListArrayOutputWithContext(context.Background())
}

func (i ListArray) ToListArrayOutputWithContext(ctx context.Context) ListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListArrayOutput)
}

// ListMapInput is an input type that accepts ListMap and ListMapOutput values.
// You can construct a concrete instance of `ListMapInput` via:
//
//          ListMap{ "key": ListArgs{...} }
type ListMapInput interface {
	pulumi.Input

	ToListMapOutput() ListMapOutput
	ToListMapOutputWithContext(context.Context) ListMapOutput
}

type ListMap map[string]ListInput

func (ListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*List)(nil)).Elem()
}

func (i ListMap) ToListMapOutput() ListMapOutput {
	return i.ToListMapOutputWithContext(context.Background())
}

func (i ListMap) ToListMapOutputWithContext(ctx context.Context) ListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListMapOutput)
}

type ListOutput struct{ *pulumi.OutputState }

func (ListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*List)(nil))
}

func (o ListOutput) ToListOutput() ListOutput {
	return o
}

func (o ListOutput) ToListOutputWithContext(ctx context.Context) ListOutput {
	return o
}

func (o ListOutput) ToListPtrOutput() ListPtrOutput {
	return o.ToListPtrOutputWithContext(context.Background())
}

func (o ListOutput) ToListPtrOutputWithContext(ctx context.Context) ListPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v List) *List {
		return &v
	}).(ListPtrOutput)
}

type ListPtrOutput struct{ *pulumi.OutputState }

func (ListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**List)(nil))
}

func (o ListPtrOutput) ToListPtrOutput() ListPtrOutput {
	return o
}

func (o ListPtrOutput) ToListPtrOutputWithContext(ctx context.Context) ListPtrOutput {
	return o
}

func (o ListPtrOutput) Elem() ListOutput {
	return o.ApplyT(func(v *List) List {
		if v != nil {
			return *v
		}
		var ret List
		return ret
	}).(ListOutput)
}

type ListArrayOutput struct{ *pulumi.OutputState }

func (ListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]List)(nil))
}

func (o ListArrayOutput) ToListArrayOutput() ListArrayOutput {
	return o
}

func (o ListArrayOutput) ToListArrayOutputWithContext(ctx context.Context) ListArrayOutput {
	return o
}

func (o ListArrayOutput) Index(i pulumi.IntInput) ListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) List {
		return vs[0].([]List)[vs[1].(int)]
	}).(ListOutput)
}

type ListMapOutput struct{ *pulumi.OutputState }

func (ListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]List)(nil))
}

func (o ListMapOutput) ToListMapOutput() ListMapOutput {
	return o
}

func (o ListMapOutput) ToListMapOutputWithContext(ctx context.Context) ListMapOutput {
	return o
}

func (o ListMapOutput) MapIndex(k pulumi.StringInput) ListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) List {
		return vs[0].(map[string]List)[vs[1].(string)]
	}).(ListOutput)
}

func init() {
	pulumi.RegisterOutputType(ListOutput{})
	pulumi.RegisterOutputType(ListPtrOutput{})
	pulumi.RegisterOutputType(ListArrayOutput{})
	pulumi.RegisterOutputType(ListMapOutput{})
}
