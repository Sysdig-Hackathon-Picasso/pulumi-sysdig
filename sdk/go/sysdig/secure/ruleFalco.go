// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secure

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RuleFalco struct {
	pulumi.CustomResourceState

	Append      pulumi.BoolPtrOutput          `pulumi:"append"`
	Condition   pulumi.StringOutput           `pulumi:"condition"`
	Description pulumi.StringPtrOutput        `pulumi:"description"`
	Exceptions  RuleFalcoExceptionArrayOutput `pulumi:"exceptions"`
	Name        pulumi.StringOutput           `pulumi:"name"`
	Output      pulumi.StringPtrOutput        `pulumi:"output"`
	Priority    pulumi.StringPtrOutput        `pulumi:"priority"`
	Source      pulumi.StringPtrOutput        `pulumi:"source"`
	Tags        pulumi.StringArrayOutput      `pulumi:"tags"`
	Version     pulumi.IntOutput              `pulumi:"version"`
}

// NewRuleFalco registers a new resource with the given unique name, arguments, and options.
func NewRuleFalco(ctx *pulumi.Context,
	name string, args *RuleFalcoArgs, opts ...pulumi.ResourceOption) (*RuleFalco, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Condition == nil {
		return nil, errors.New("invalid value for required argument 'Condition'")
	}
	var resource RuleFalco
	err := ctx.RegisterResource("sysdig:Secure/ruleFalco:RuleFalco", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleFalco gets an existing RuleFalco resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleFalco(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleFalcoState, opts ...pulumi.ResourceOption) (*RuleFalco, error) {
	var resource RuleFalco
	err := ctx.ReadResource("sysdig:Secure/ruleFalco:RuleFalco", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleFalco resources.
type ruleFalcoState struct {
	Append      *bool                `pulumi:"append"`
	Condition   *string              `pulumi:"condition"`
	Description *string              `pulumi:"description"`
	Exceptions  []RuleFalcoException `pulumi:"exceptions"`
	Name        *string              `pulumi:"name"`
	Output      *string              `pulumi:"output"`
	Priority    *string              `pulumi:"priority"`
	Source      *string              `pulumi:"source"`
	Tags        []string             `pulumi:"tags"`
	Version     *int                 `pulumi:"version"`
}

type RuleFalcoState struct {
	Append      pulumi.BoolPtrInput
	Condition   pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	Exceptions  RuleFalcoExceptionArrayInput
	Name        pulumi.StringPtrInput
	Output      pulumi.StringPtrInput
	Priority    pulumi.StringPtrInput
	Source      pulumi.StringPtrInput
	Tags        pulumi.StringArrayInput
	Version     pulumi.IntPtrInput
}

func (RuleFalcoState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleFalcoState)(nil)).Elem()
}

type ruleFalcoArgs struct {
	Append      *bool                `pulumi:"append"`
	Condition   string               `pulumi:"condition"`
	Description *string              `pulumi:"description"`
	Exceptions  []RuleFalcoException `pulumi:"exceptions"`
	Name        *string              `pulumi:"name"`
	Output      *string              `pulumi:"output"`
	Priority    *string              `pulumi:"priority"`
	Source      *string              `pulumi:"source"`
	Tags        []string             `pulumi:"tags"`
}

// The set of arguments for constructing a RuleFalco resource.
type RuleFalcoArgs struct {
	Append      pulumi.BoolPtrInput
	Condition   pulumi.StringInput
	Description pulumi.StringPtrInput
	Exceptions  RuleFalcoExceptionArrayInput
	Name        pulumi.StringPtrInput
	Output      pulumi.StringPtrInput
	Priority    pulumi.StringPtrInput
	Source      pulumi.StringPtrInput
	Tags        pulumi.StringArrayInput
}

func (RuleFalcoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleFalcoArgs)(nil)).Elem()
}

type RuleFalcoInput interface {
	pulumi.Input

	ToRuleFalcoOutput() RuleFalcoOutput
	ToRuleFalcoOutputWithContext(ctx context.Context) RuleFalcoOutput
}

func (*RuleFalco) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleFalco)(nil))
}

func (i *RuleFalco) ToRuleFalcoOutput() RuleFalcoOutput {
	return i.ToRuleFalcoOutputWithContext(context.Background())
}

func (i *RuleFalco) ToRuleFalcoOutputWithContext(ctx context.Context) RuleFalcoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFalcoOutput)
}

func (i *RuleFalco) ToRuleFalcoPtrOutput() RuleFalcoPtrOutput {
	return i.ToRuleFalcoPtrOutputWithContext(context.Background())
}

func (i *RuleFalco) ToRuleFalcoPtrOutputWithContext(ctx context.Context) RuleFalcoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFalcoPtrOutput)
}

type RuleFalcoPtrInput interface {
	pulumi.Input

	ToRuleFalcoPtrOutput() RuleFalcoPtrOutput
	ToRuleFalcoPtrOutputWithContext(ctx context.Context) RuleFalcoPtrOutput
}

type ruleFalcoPtrType RuleFalcoArgs

func (*ruleFalcoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleFalco)(nil))
}

func (i *ruleFalcoPtrType) ToRuleFalcoPtrOutput() RuleFalcoPtrOutput {
	return i.ToRuleFalcoPtrOutputWithContext(context.Background())
}

func (i *ruleFalcoPtrType) ToRuleFalcoPtrOutputWithContext(ctx context.Context) RuleFalcoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFalcoPtrOutput)
}

// RuleFalcoArrayInput is an input type that accepts RuleFalcoArray and RuleFalcoArrayOutput values.
// You can construct a concrete instance of `RuleFalcoArrayInput` via:
//
//          RuleFalcoArray{ RuleFalcoArgs{...} }
type RuleFalcoArrayInput interface {
	pulumi.Input

	ToRuleFalcoArrayOutput() RuleFalcoArrayOutput
	ToRuleFalcoArrayOutputWithContext(context.Context) RuleFalcoArrayOutput
}

type RuleFalcoArray []RuleFalcoInput

func (RuleFalcoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleFalco)(nil)).Elem()
}

func (i RuleFalcoArray) ToRuleFalcoArrayOutput() RuleFalcoArrayOutput {
	return i.ToRuleFalcoArrayOutputWithContext(context.Background())
}

func (i RuleFalcoArray) ToRuleFalcoArrayOutputWithContext(ctx context.Context) RuleFalcoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFalcoArrayOutput)
}

// RuleFalcoMapInput is an input type that accepts RuleFalcoMap and RuleFalcoMapOutput values.
// You can construct a concrete instance of `RuleFalcoMapInput` via:
//
//          RuleFalcoMap{ "key": RuleFalcoArgs{...} }
type RuleFalcoMapInput interface {
	pulumi.Input

	ToRuleFalcoMapOutput() RuleFalcoMapOutput
	ToRuleFalcoMapOutputWithContext(context.Context) RuleFalcoMapOutput
}

type RuleFalcoMap map[string]RuleFalcoInput

func (RuleFalcoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleFalco)(nil)).Elem()
}

func (i RuleFalcoMap) ToRuleFalcoMapOutput() RuleFalcoMapOutput {
	return i.ToRuleFalcoMapOutputWithContext(context.Background())
}

func (i RuleFalcoMap) ToRuleFalcoMapOutputWithContext(ctx context.Context) RuleFalcoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFalcoMapOutput)
}

type RuleFalcoOutput struct{ *pulumi.OutputState }

func (RuleFalcoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleFalco)(nil))
}

func (o RuleFalcoOutput) ToRuleFalcoOutput() RuleFalcoOutput {
	return o
}

func (o RuleFalcoOutput) ToRuleFalcoOutputWithContext(ctx context.Context) RuleFalcoOutput {
	return o
}

func (o RuleFalcoOutput) ToRuleFalcoPtrOutput() RuleFalcoPtrOutput {
	return o.ToRuleFalcoPtrOutputWithContext(context.Background())
}

func (o RuleFalcoOutput) ToRuleFalcoPtrOutputWithContext(ctx context.Context) RuleFalcoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleFalco) *RuleFalco {
		return &v
	}).(RuleFalcoPtrOutput)
}

type RuleFalcoPtrOutput struct{ *pulumi.OutputState }

func (RuleFalcoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleFalco)(nil))
}

func (o RuleFalcoPtrOutput) ToRuleFalcoPtrOutput() RuleFalcoPtrOutput {
	return o
}

func (o RuleFalcoPtrOutput) ToRuleFalcoPtrOutputWithContext(ctx context.Context) RuleFalcoPtrOutput {
	return o
}

func (o RuleFalcoPtrOutput) Elem() RuleFalcoOutput {
	return o.ApplyT(func(v *RuleFalco) RuleFalco {
		if v != nil {
			return *v
		}
		var ret RuleFalco
		return ret
	}).(RuleFalcoOutput)
}

type RuleFalcoArrayOutput struct{ *pulumi.OutputState }

func (RuleFalcoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleFalco)(nil))
}

func (o RuleFalcoArrayOutput) ToRuleFalcoArrayOutput() RuleFalcoArrayOutput {
	return o
}

func (o RuleFalcoArrayOutput) ToRuleFalcoArrayOutputWithContext(ctx context.Context) RuleFalcoArrayOutput {
	return o
}

func (o RuleFalcoArrayOutput) Index(i pulumi.IntInput) RuleFalcoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleFalco {
		return vs[0].([]RuleFalco)[vs[1].(int)]
	}).(RuleFalcoOutput)
}

type RuleFalcoMapOutput struct{ *pulumi.OutputState }

func (RuleFalcoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RuleFalco)(nil))
}

func (o RuleFalcoMapOutput) ToRuleFalcoMapOutput() RuleFalcoMapOutput {
	return o
}

func (o RuleFalcoMapOutput) ToRuleFalcoMapOutputWithContext(ctx context.Context) RuleFalcoMapOutput {
	return o
}

func (o RuleFalcoMapOutput) MapIndex(k pulumi.StringInput) RuleFalcoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RuleFalco {
		return vs[0].(map[string]RuleFalco)[vs[1].(string)]
	}).(RuleFalcoOutput)
}

func init() {
	pulumi.RegisterOutputType(RuleFalcoOutput{})
	pulumi.RegisterOutputType(RuleFalcoPtrOutput{})
	pulumi.RegisterOutputType(RuleFalcoArrayOutput{})
	pulumi.RegisterOutputType(RuleFalcoMapOutput{})
}
