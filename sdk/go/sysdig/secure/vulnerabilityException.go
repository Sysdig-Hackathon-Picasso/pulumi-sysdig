// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secure

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VulnerabilityException struct {
	pulumi.CustomResourceState

	Cve            pulumi.StringOutput    `pulumi:"cve"`
	Enabled        pulumi.BoolPtrOutput   `pulumi:"enabled"`
	ExpirationDate pulumi.IntPtrOutput    `pulumi:"expirationDate"`
	ListId         pulumi.StringOutput    `pulumi:"listId"`
	Notes          pulumi.StringPtrOutput `pulumi:"notes"`
}

// NewVulnerabilityException registers a new resource with the given unique name, arguments, and options.
func NewVulnerabilityException(ctx *pulumi.Context,
	name string, args *VulnerabilityExceptionArgs, opts ...pulumi.ResourceOption) (*VulnerabilityException, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cve == nil {
		return nil, errors.New("invalid value for required argument 'Cve'")
	}
	if args.ListId == nil {
		return nil, errors.New("invalid value for required argument 'ListId'")
	}
	var resource VulnerabilityException
	err := ctx.RegisterResource("sysdig:Secure/vulnerabilityException:VulnerabilityException", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVulnerabilityException gets an existing VulnerabilityException resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVulnerabilityException(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VulnerabilityExceptionState, opts ...pulumi.ResourceOption) (*VulnerabilityException, error) {
	var resource VulnerabilityException
	err := ctx.ReadResource("sysdig:Secure/vulnerabilityException:VulnerabilityException", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VulnerabilityException resources.
type vulnerabilityExceptionState struct {
	Cve            *string `pulumi:"cve"`
	Enabled        *bool   `pulumi:"enabled"`
	ExpirationDate *int    `pulumi:"expirationDate"`
	ListId         *string `pulumi:"listId"`
	Notes          *string `pulumi:"notes"`
}

type VulnerabilityExceptionState struct {
	Cve            pulumi.StringPtrInput
	Enabled        pulumi.BoolPtrInput
	ExpirationDate pulumi.IntPtrInput
	ListId         pulumi.StringPtrInput
	Notes          pulumi.StringPtrInput
}

func (VulnerabilityExceptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilityExceptionState)(nil)).Elem()
}

type vulnerabilityExceptionArgs struct {
	Cve            string  `pulumi:"cve"`
	Enabled        *bool   `pulumi:"enabled"`
	ExpirationDate *int    `pulumi:"expirationDate"`
	ListId         string  `pulumi:"listId"`
	Notes          *string `pulumi:"notes"`
}

// The set of arguments for constructing a VulnerabilityException resource.
type VulnerabilityExceptionArgs struct {
	Cve            pulumi.StringInput
	Enabled        pulumi.BoolPtrInput
	ExpirationDate pulumi.IntPtrInput
	ListId         pulumi.StringInput
	Notes          pulumi.StringPtrInput
}

func (VulnerabilityExceptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilityExceptionArgs)(nil)).Elem()
}

type VulnerabilityExceptionInput interface {
	pulumi.Input

	ToVulnerabilityExceptionOutput() VulnerabilityExceptionOutput
	ToVulnerabilityExceptionOutputWithContext(ctx context.Context) VulnerabilityExceptionOutput
}

func (*VulnerabilityException) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityException)(nil))
}

func (i *VulnerabilityException) ToVulnerabilityExceptionOutput() VulnerabilityExceptionOutput {
	return i.ToVulnerabilityExceptionOutputWithContext(context.Background())
}

func (i *VulnerabilityException) ToVulnerabilityExceptionOutputWithContext(ctx context.Context) VulnerabilityExceptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityExceptionOutput)
}

func (i *VulnerabilityException) ToVulnerabilityExceptionPtrOutput() VulnerabilityExceptionPtrOutput {
	return i.ToVulnerabilityExceptionPtrOutputWithContext(context.Background())
}

func (i *VulnerabilityException) ToVulnerabilityExceptionPtrOutputWithContext(ctx context.Context) VulnerabilityExceptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityExceptionPtrOutput)
}

type VulnerabilityExceptionPtrInput interface {
	pulumi.Input

	ToVulnerabilityExceptionPtrOutput() VulnerabilityExceptionPtrOutput
	ToVulnerabilityExceptionPtrOutputWithContext(ctx context.Context) VulnerabilityExceptionPtrOutput
}

type vulnerabilityExceptionPtrType VulnerabilityExceptionArgs

func (*vulnerabilityExceptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityException)(nil))
}

func (i *vulnerabilityExceptionPtrType) ToVulnerabilityExceptionPtrOutput() VulnerabilityExceptionPtrOutput {
	return i.ToVulnerabilityExceptionPtrOutputWithContext(context.Background())
}

func (i *vulnerabilityExceptionPtrType) ToVulnerabilityExceptionPtrOutputWithContext(ctx context.Context) VulnerabilityExceptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityExceptionPtrOutput)
}

// VulnerabilityExceptionArrayInput is an input type that accepts VulnerabilityExceptionArray and VulnerabilityExceptionArrayOutput values.
// You can construct a concrete instance of `VulnerabilityExceptionArrayInput` via:
//
//          VulnerabilityExceptionArray{ VulnerabilityExceptionArgs{...} }
type VulnerabilityExceptionArrayInput interface {
	pulumi.Input

	ToVulnerabilityExceptionArrayOutput() VulnerabilityExceptionArrayOutput
	ToVulnerabilityExceptionArrayOutputWithContext(context.Context) VulnerabilityExceptionArrayOutput
}

type VulnerabilityExceptionArray []VulnerabilityExceptionInput

func (VulnerabilityExceptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VulnerabilityException)(nil)).Elem()
}

func (i VulnerabilityExceptionArray) ToVulnerabilityExceptionArrayOutput() VulnerabilityExceptionArrayOutput {
	return i.ToVulnerabilityExceptionArrayOutputWithContext(context.Background())
}

func (i VulnerabilityExceptionArray) ToVulnerabilityExceptionArrayOutputWithContext(ctx context.Context) VulnerabilityExceptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityExceptionArrayOutput)
}

// VulnerabilityExceptionMapInput is an input type that accepts VulnerabilityExceptionMap and VulnerabilityExceptionMapOutput values.
// You can construct a concrete instance of `VulnerabilityExceptionMapInput` via:
//
//          VulnerabilityExceptionMap{ "key": VulnerabilityExceptionArgs{...} }
type VulnerabilityExceptionMapInput interface {
	pulumi.Input

	ToVulnerabilityExceptionMapOutput() VulnerabilityExceptionMapOutput
	ToVulnerabilityExceptionMapOutputWithContext(context.Context) VulnerabilityExceptionMapOutput
}

type VulnerabilityExceptionMap map[string]VulnerabilityExceptionInput

func (VulnerabilityExceptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VulnerabilityException)(nil)).Elem()
}

func (i VulnerabilityExceptionMap) ToVulnerabilityExceptionMapOutput() VulnerabilityExceptionMapOutput {
	return i.ToVulnerabilityExceptionMapOutputWithContext(context.Background())
}

func (i VulnerabilityExceptionMap) ToVulnerabilityExceptionMapOutputWithContext(ctx context.Context) VulnerabilityExceptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityExceptionMapOutput)
}

type VulnerabilityExceptionOutput struct{ *pulumi.OutputState }

func (VulnerabilityExceptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityException)(nil))
}

func (o VulnerabilityExceptionOutput) ToVulnerabilityExceptionOutput() VulnerabilityExceptionOutput {
	return o
}

func (o VulnerabilityExceptionOutput) ToVulnerabilityExceptionOutputWithContext(ctx context.Context) VulnerabilityExceptionOutput {
	return o
}

func (o VulnerabilityExceptionOutput) ToVulnerabilityExceptionPtrOutput() VulnerabilityExceptionPtrOutput {
	return o.ToVulnerabilityExceptionPtrOutputWithContext(context.Background())
}

func (o VulnerabilityExceptionOutput) ToVulnerabilityExceptionPtrOutputWithContext(ctx context.Context) VulnerabilityExceptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VulnerabilityException) *VulnerabilityException {
		return &v
	}).(VulnerabilityExceptionPtrOutput)
}

type VulnerabilityExceptionPtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityExceptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityException)(nil))
}

func (o VulnerabilityExceptionPtrOutput) ToVulnerabilityExceptionPtrOutput() VulnerabilityExceptionPtrOutput {
	return o
}

func (o VulnerabilityExceptionPtrOutput) ToVulnerabilityExceptionPtrOutputWithContext(ctx context.Context) VulnerabilityExceptionPtrOutput {
	return o
}

func (o VulnerabilityExceptionPtrOutput) Elem() VulnerabilityExceptionOutput {
	return o.ApplyT(func(v *VulnerabilityException) VulnerabilityException {
		if v != nil {
			return *v
		}
		var ret VulnerabilityException
		return ret
	}).(VulnerabilityExceptionOutput)
}

type VulnerabilityExceptionArrayOutput struct{ *pulumi.OutputState }

func (VulnerabilityExceptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VulnerabilityException)(nil))
}

func (o VulnerabilityExceptionArrayOutput) ToVulnerabilityExceptionArrayOutput() VulnerabilityExceptionArrayOutput {
	return o
}

func (o VulnerabilityExceptionArrayOutput) ToVulnerabilityExceptionArrayOutputWithContext(ctx context.Context) VulnerabilityExceptionArrayOutput {
	return o
}

func (o VulnerabilityExceptionArrayOutput) Index(i pulumi.IntInput) VulnerabilityExceptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VulnerabilityException {
		return vs[0].([]VulnerabilityException)[vs[1].(int)]
	}).(VulnerabilityExceptionOutput)
}

type VulnerabilityExceptionMapOutput struct{ *pulumi.OutputState }

func (VulnerabilityExceptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VulnerabilityException)(nil))
}

func (o VulnerabilityExceptionMapOutput) ToVulnerabilityExceptionMapOutput() VulnerabilityExceptionMapOutput {
	return o
}

func (o VulnerabilityExceptionMapOutput) ToVulnerabilityExceptionMapOutputWithContext(ctx context.Context) VulnerabilityExceptionMapOutput {
	return o
}

func (o VulnerabilityExceptionMapOutput) MapIndex(k pulumi.StringInput) VulnerabilityExceptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VulnerabilityException {
		return vs[0].(map[string]VulnerabilityException)[vs[1].(string)]
	}).(VulnerabilityExceptionOutput)
}

func init() {
	pulumi.RegisterOutputType(VulnerabilityExceptionOutput{})
	pulumi.RegisterOutputType(VulnerabilityExceptionPtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityExceptionArrayOutput{})
	pulumi.RegisterOutputType(VulnerabilityExceptionMapOutput{})
}
