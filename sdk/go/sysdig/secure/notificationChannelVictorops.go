// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secure

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NotificationChannelVictorops struct {
	pulumi.CustomResourceState

	ApiKey               pulumi.StringOutput  `pulumi:"apiKey"`
	Enabled              pulumi.BoolOutput    `pulumi:"enabled"`
	Name                 pulumi.StringOutput  `pulumi:"name"`
	NotifyWhenOk         pulumi.BoolOutput    `pulumi:"notifyWhenOk"`
	NotifyWhenResolved   pulumi.BoolOutput    `pulumi:"notifyWhenResolved"`
	RoutingKey           pulumi.StringOutput  `pulumi:"routingKey"`
	SendTestNotification pulumi.BoolPtrOutput `pulumi:"sendTestNotification"`
	Version              pulumi.IntOutput     `pulumi:"version"`
}

// NewNotificationChannelVictorops registers a new resource with the given unique name, arguments, and options.
func NewNotificationChannelVictorops(ctx *pulumi.Context,
	name string, args *NotificationChannelVictoropsArgs, opts ...pulumi.ResourceOption) (*NotificationChannelVictorops, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiKey'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.NotifyWhenOk == nil {
		return nil, errors.New("invalid value for required argument 'NotifyWhenOk'")
	}
	if args.NotifyWhenResolved == nil {
		return nil, errors.New("invalid value for required argument 'NotifyWhenResolved'")
	}
	if args.RoutingKey == nil {
		return nil, errors.New("invalid value for required argument 'RoutingKey'")
	}
	var resource NotificationChannelVictorops
	err := ctx.RegisterResource("sysdig:Secure/notificationChannelVictorops:NotificationChannelVictorops", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationChannelVictorops gets an existing NotificationChannelVictorops resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationChannelVictorops(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationChannelVictoropsState, opts ...pulumi.ResourceOption) (*NotificationChannelVictorops, error) {
	var resource NotificationChannelVictorops
	err := ctx.ReadResource("sysdig:Secure/notificationChannelVictorops:NotificationChannelVictorops", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationChannelVictorops resources.
type notificationChannelVictoropsState struct {
	ApiKey               *string `pulumi:"apiKey"`
	Enabled              *bool   `pulumi:"enabled"`
	Name                 *string `pulumi:"name"`
	NotifyWhenOk         *bool   `pulumi:"notifyWhenOk"`
	NotifyWhenResolved   *bool   `pulumi:"notifyWhenResolved"`
	RoutingKey           *string `pulumi:"routingKey"`
	SendTestNotification *bool   `pulumi:"sendTestNotification"`
	Version              *int    `pulumi:"version"`
}

type NotificationChannelVictoropsState struct {
	ApiKey               pulumi.StringPtrInput
	Enabled              pulumi.BoolPtrInput
	Name                 pulumi.StringPtrInput
	NotifyWhenOk         pulumi.BoolPtrInput
	NotifyWhenResolved   pulumi.BoolPtrInput
	RoutingKey           pulumi.StringPtrInput
	SendTestNotification pulumi.BoolPtrInput
	Version              pulumi.IntPtrInput
}

func (NotificationChannelVictoropsState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationChannelVictoropsState)(nil)).Elem()
}

type notificationChannelVictoropsArgs struct {
	ApiKey               string  `pulumi:"apiKey"`
	Enabled              bool    `pulumi:"enabled"`
	Name                 *string `pulumi:"name"`
	NotifyWhenOk         bool    `pulumi:"notifyWhenOk"`
	NotifyWhenResolved   bool    `pulumi:"notifyWhenResolved"`
	RoutingKey           string  `pulumi:"routingKey"`
	SendTestNotification *bool   `pulumi:"sendTestNotification"`
}

// The set of arguments for constructing a NotificationChannelVictorops resource.
type NotificationChannelVictoropsArgs struct {
	ApiKey               pulumi.StringInput
	Enabled              pulumi.BoolInput
	Name                 pulumi.StringPtrInput
	NotifyWhenOk         pulumi.BoolInput
	NotifyWhenResolved   pulumi.BoolInput
	RoutingKey           pulumi.StringInput
	SendTestNotification pulumi.BoolPtrInput
}

func (NotificationChannelVictoropsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationChannelVictoropsArgs)(nil)).Elem()
}

type NotificationChannelVictoropsInput interface {
	pulumi.Input

	ToNotificationChannelVictoropsOutput() NotificationChannelVictoropsOutput
	ToNotificationChannelVictoropsOutputWithContext(ctx context.Context) NotificationChannelVictoropsOutput
}

func (*NotificationChannelVictorops) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationChannelVictorops)(nil))
}

func (i *NotificationChannelVictorops) ToNotificationChannelVictoropsOutput() NotificationChannelVictoropsOutput {
	return i.ToNotificationChannelVictoropsOutputWithContext(context.Background())
}

func (i *NotificationChannelVictorops) ToNotificationChannelVictoropsOutputWithContext(ctx context.Context) NotificationChannelVictoropsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelVictoropsOutput)
}

func (i *NotificationChannelVictorops) ToNotificationChannelVictoropsPtrOutput() NotificationChannelVictoropsPtrOutput {
	return i.ToNotificationChannelVictoropsPtrOutputWithContext(context.Background())
}

func (i *NotificationChannelVictorops) ToNotificationChannelVictoropsPtrOutputWithContext(ctx context.Context) NotificationChannelVictoropsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelVictoropsPtrOutput)
}

type NotificationChannelVictoropsPtrInput interface {
	pulumi.Input

	ToNotificationChannelVictoropsPtrOutput() NotificationChannelVictoropsPtrOutput
	ToNotificationChannelVictoropsPtrOutputWithContext(ctx context.Context) NotificationChannelVictoropsPtrOutput
}

type notificationChannelVictoropsPtrType NotificationChannelVictoropsArgs

func (*notificationChannelVictoropsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationChannelVictorops)(nil))
}

func (i *notificationChannelVictoropsPtrType) ToNotificationChannelVictoropsPtrOutput() NotificationChannelVictoropsPtrOutput {
	return i.ToNotificationChannelVictoropsPtrOutputWithContext(context.Background())
}

func (i *notificationChannelVictoropsPtrType) ToNotificationChannelVictoropsPtrOutputWithContext(ctx context.Context) NotificationChannelVictoropsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelVictoropsPtrOutput)
}

// NotificationChannelVictoropsArrayInput is an input type that accepts NotificationChannelVictoropsArray and NotificationChannelVictoropsArrayOutput values.
// You can construct a concrete instance of `NotificationChannelVictoropsArrayInput` via:
//
//          NotificationChannelVictoropsArray{ NotificationChannelVictoropsArgs{...} }
type NotificationChannelVictoropsArrayInput interface {
	pulumi.Input

	ToNotificationChannelVictoropsArrayOutput() NotificationChannelVictoropsArrayOutput
	ToNotificationChannelVictoropsArrayOutputWithContext(context.Context) NotificationChannelVictoropsArrayOutput
}

type NotificationChannelVictoropsArray []NotificationChannelVictoropsInput

func (NotificationChannelVictoropsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationChannelVictorops)(nil)).Elem()
}

func (i NotificationChannelVictoropsArray) ToNotificationChannelVictoropsArrayOutput() NotificationChannelVictoropsArrayOutput {
	return i.ToNotificationChannelVictoropsArrayOutputWithContext(context.Background())
}

func (i NotificationChannelVictoropsArray) ToNotificationChannelVictoropsArrayOutputWithContext(ctx context.Context) NotificationChannelVictoropsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelVictoropsArrayOutput)
}

// NotificationChannelVictoropsMapInput is an input type that accepts NotificationChannelVictoropsMap and NotificationChannelVictoropsMapOutput values.
// You can construct a concrete instance of `NotificationChannelVictoropsMapInput` via:
//
//          NotificationChannelVictoropsMap{ "key": NotificationChannelVictoropsArgs{...} }
type NotificationChannelVictoropsMapInput interface {
	pulumi.Input

	ToNotificationChannelVictoropsMapOutput() NotificationChannelVictoropsMapOutput
	ToNotificationChannelVictoropsMapOutputWithContext(context.Context) NotificationChannelVictoropsMapOutput
}

type NotificationChannelVictoropsMap map[string]NotificationChannelVictoropsInput

func (NotificationChannelVictoropsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationChannelVictorops)(nil)).Elem()
}

func (i NotificationChannelVictoropsMap) ToNotificationChannelVictoropsMapOutput() NotificationChannelVictoropsMapOutput {
	return i.ToNotificationChannelVictoropsMapOutputWithContext(context.Background())
}

func (i NotificationChannelVictoropsMap) ToNotificationChannelVictoropsMapOutputWithContext(ctx context.Context) NotificationChannelVictoropsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelVictoropsMapOutput)
}

type NotificationChannelVictoropsOutput struct{ *pulumi.OutputState }

func (NotificationChannelVictoropsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationChannelVictorops)(nil))
}

func (o NotificationChannelVictoropsOutput) ToNotificationChannelVictoropsOutput() NotificationChannelVictoropsOutput {
	return o
}

func (o NotificationChannelVictoropsOutput) ToNotificationChannelVictoropsOutputWithContext(ctx context.Context) NotificationChannelVictoropsOutput {
	return o
}

func (o NotificationChannelVictoropsOutput) ToNotificationChannelVictoropsPtrOutput() NotificationChannelVictoropsPtrOutput {
	return o.ToNotificationChannelVictoropsPtrOutputWithContext(context.Background())
}

func (o NotificationChannelVictoropsOutput) ToNotificationChannelVictoropsPtrOutputWithContext(ctx context.Context) NotificationChannelVictoropsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationChannelVictorops) *NotificationChannelVictorops {
		return &v
	}).(NotificationChannelVictoropsPtrOutput)
}

type NotificationChannelVictoropsPtrOutput struct{ *pulumi.OutputState }

func (NotificationChannelVictoropsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationChannelVictorops)(nil))
}

func (o NotificationChannelVictoropsPtrOutput) ToNotificationChannelVictoropsPtrOutput() NotificationChannelVictoropsPtrOutput {
	return o
}

func (o NotificationChannelVictoropsPtrOutput) ToNotificationChannelVictoropsPtrOutputWithContext(ctx context.Context) NotificationChannelVictoropsPtrOutput {
	return o
}

func (o NotificationChannelVictoropsPtrOutput) Elem() NotificationChannelVictoropsOutput {
	return o.ApplyT(func(v *NotificationChannelVictorops) NotificationChannelVictorops {
		if v != nil {
			return *v
		}
		var ret NotificationChannelVictorops
		return ret
	}).(NotificationChannelVictoropsOutput)
}

type NotificationChannelVictoropsArrayOutput struct{ *pulumi.OutputState }

func (NotificationChannelVictoropsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationChannelVictorops)(nil))
}

func (o NotificationChannelVictoropsArrayOutput) ToNotificationChannelVictoropsArrayOutput() NotificationChannelVictoropsArrayOutput {
	return o
}

func (o NotificationChannelVictoropsArrayOutput) ToNotificationChannelVictoropsArrayOutputWithContext(ctx context.Context) NotificationChannelVictoropsArrayOutput {
	return o
}

func (o NotificationChannelVictoropsArrayOutput) Index(i pulumi.IntInput) NotificationChannelVictoropsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationChannelVictorops {
		return vs[0].([]NotificationChannelVictorops)[vs[1].(int)]
	}).(NotificationChannelVictoropsOutput)
}

type NotificationChannelVictoropsMapOutput struct{ *pulumi.OutputState }

func (NotificationChannelVictoropsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NotificationChannelVictorops)(nil))
}

func (o NotificationChannelVictoropsMapOutput) ToNotificationChannelVictoropsMapOutput() NotificationChannelVictoropsMapOutput {
	return o
}

func (o NotificationChannelVictoropsMapOutput) ToNotificationChannelVictoropsMapOutputWithContext(ctx context.Context) NotificationChannelVictoropsMapOutput {
	return o
}

func (o NotificationChannelVictoropsMapOutput) MapIndex(k pulumi.StringInput) NotificationChannelVictoropsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NotificationChannelVictorops {
		return vs[0].(map[string]NotificationChannelVictorops)[vs[1].(string)]
	}).(NotificationChannelVictoropsOutput)
}

func init() {
	pulumi.RegisterOutputType(NotificationChannelVictoropsOutput{})
	pulumi.RegisterOutputType(NotificationChannelVictoropsPtrOutput{})
	pulumi.RegisterOutputType(NotificationChannelVictoropsArrayOutput{})
	pulumi.RegisterOutputType(NotificationChannelVictoropsMapOutput{})
}
