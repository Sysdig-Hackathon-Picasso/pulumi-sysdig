// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secure

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BenchmarkTask struct {
	pulumi.CustomResourceState

	Enabled  pulumi.BoolPtrOutput `pulumi:"enabled"`
	Id       pulumi.StringOutput  `pulumi:"id"`
	Name     pulumi.StringOutput  `pulumi:"name"`
	Schedule pulumi.StringOutput  `pulumi:"schedule"`
	Schema   pulumi.StringOutput  `pulumi:"schema"`
	Scope    pulumi.StringOutput  `pulumi:"scope"`
}

// NewBenchmarkTask registers a new resource with the given unique name, arguments, and options.
func NewBenchmarkTask(ctx *pulumi.Context,
	name string, args *BenchmarkTaskArgs, opts ...pulumi.ResourceOption) (*BenchmarkTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	var resource BenchmarkTask
	err := ctx.RegisterResource("sysdig:Secure/benchmarkTask:BenchmarkTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBenchmarkTask gets an existing BenchmarkTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBenchmarkTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BenchmarkTaskState, opts ...pulumi.ResourceOption) (*BenchmarkTask, error) {
	var resource BenchmarkTask
	err := ctx.ReadResource("sysdig:Secure/benchmarkTask:BenchmarkTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BenchmarkTask resources.
type benchmarkTaskState struct {
	Enabled  *bool   `pulumi:"enabled"`
	Id       *string `pulumi:"id"`
	Name     *string `pulumi:"name"`
	Schedule *string `pulumi:"schedule"`
	Schema   *string `pulumi:"schema"`
	Scope    *string `pulumi:"scope"`
}

type BenchmarkTaskState struct {
	Enabled  pulumi.BoolPtrInput
	Id       pulumi.StringPtrInput
	Name     pulumi.StringPtrInput
	Schedule pulumi.StringPtrInput
	Schema   pulumi.StringPtrInput
	Scope    pulumi.StringPtrInput
}

func (BenchmarkTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*benchmarkTaskState)(nil)).Elem()
}

type benchmarkTaskArgs struct {
	Enabled  *bool   `pulumi:"enabled"`
	Name     *string `pulumi:"name"`
	Schedule string  `pulumi:"schedule"`
	Schema   string  `pulumi:"schema"`
	Scope    string  `pulumi:"scope"`
}

// The set of arguments for constructing a BenchmarkTask resource.
type BenchmarkTaskArgs struct {
	Enabled  pulumi.BoolPtrInput
	Name     pulumi.StringPtrInput
	Schedule pulumi.StringInput
	Schema   pulumi.StringInput
	Scope    pulumi.StringInput
}

func (BenchmarkTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*benchmarkTaskArgs)(nil)).Elem()
}

type BenchmarkTaskInput interface {
	pulumi.Input

	ToBenchmarkTaskOutput() BenchmarkTaskOutput
	ToBenchmarkTaskOutputWithContext(ctx context.Context) BenchmarkTaskOutput
}

func (*BenchmarkTask) ElementType() reflect.Type {
	return reflect.TypeOf((*BenchmarkTask)(nil))
}

func (i *BenchmarkTask) ToBenchmarkTaskOutput() BenchmarkTaskOutput {
	return i.ToBenchmarkTaskOutputWithContext(context.Background())
}

func (i *BenchmarkTask) ToBenchmarkTaskOutputWithContext(ctx context.Context) BenchmarkTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BenchmarkTaskOutput)
}

func (i *BenchmarkTask) ToBenchmarkTaskPtrOutput() BenchmarkTaskPtrOutput {
	return i.ToBenchmarkTaskPtrOutputWithContext(context.Background())
}

func (i *BenchmarkTask) ToBenchmarkTaskPtrOutputWithContext(ctx context.Context) BenchmarkTaskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BenchmarkTaskPtrOutput)
}

type BenchmarkTaskPtrInput interface {
	pulumi.Input

	ToBenchmarkTaskPtrOutput() BenchmarkTaskPtrOutput
	ToBenchmarkTaskPtrOutputWithContext(ctx context.Context) BenchmarkTaskPtrOutput
}

type benchmarkTaskPtrType BenchmarkTaskArgs

func (*benchmarkTaskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BenchmarkTask)(nil))
}

func (i *benchmarkTaskPtrType) ToBenchmarkTaskPtrOutput() BenchmarkTaskPtrOutput {
	return i.ToBenchmarkTaskPtrOutputWithContext(context.Background())
}

func (i *benchmarkTaskPtrType) ToBenchmarkTaskPtrOutputWithContext(ctx context.Context) BenchmarkTaskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BenchmarkTaskPtrOutput)
}

// BenchmarkTaskArrayInput is an input type that accepts BenchmarkTaskArray and BenchmarkTaskArrayOutput values.
// You can construct a concrete instance of `BenchmarkTaskArrayInput` via:
//
//          BenchmarkTaskArray{ BenchmarkTaskArgs{...} }
type BenchmarkTaskArrayInput interface {
	pulumi.Input

	ToBenchmarkTaskArrayOutput() BenchmarkTaskArrayOutput
	ToBenchmarkTaskArrayOutputWithContext(context.Context) BenchmarkTaskArrayOutput
}

type BenchmarkTaskArray []BenchmarkTaskInput

func (BenchmarkTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BenchmarkTask)(nil)).Elem()
}

func (i BenchmarkTaskArray) ToBenchmarkTaskArrayOutput() BenchmarkTaskArrayOutput {
	return i.ToBenchmarkTaskArrayOutputWithContext(context.Background())
}

func (i BenchmarkTaskArray) ToBenchmarkTaskArrayOutputWithContext(ctx context.Context) BenchmarkTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BenchmarkTaskArrayOutput)
}

// BenchmarkTaskMapInput is an input type that accepts BenchmarkTaskMap and BenchmarkTaskMapOutput values.
// You can construct a concrete instance of `BenchmarkTaskMapInput` via:
//
//          BenchmarkTaskMap{ "key": BenchmarkTaskArgs{...} }
type BenchmarkTaskMapInput interface {
	pulumi.Input

	ToBenchmarkTaskMapOutput() BenchmarkTaskMapOutput
	ToBenchmarkTaskMapOutputWithContext(context.Context) BenchmarkTaskMapOutput
}

type BenchmarkTaskMap map[string]BenchmarkTaskInput

func (BenchmarkTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BenchmarkTask)(nil)).Elem()
}

func (i BenchmarkTaskMap) ToBenchmarkTaskMapOutput() BenchmarkTaskMapOutput {
	return i.ToBenchmarkTaskMapOutputWithContext(context.Background())
}

func (i BenchmarkTaskMap) ToBenchmarkTaskMapOutputWithContext(ctx context.Context) BenchmarkTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BenchmarkTaskMapOutput)
}

type BenchmarkTaskOutput struct{ *pulumi.OutputState }

func (BenchmarkTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BenchmarkTask)(nil))
}

func (o BenchmarkTaskOutput) ToBenchmarkTaskOutput() BenchmarkTaskOutput {
	return o
}

func (o BenchmarkTaskOutput) ToBenchmarkTaskOutputWithContext(ctx context.Context) BenchmarkTaskOutput {
	return o
}

func (o BenchmarkTaskOutput) ToBenchmarkTaskPtrOutput() BenchmarkTaskPtrOutput {
	return o.ToBenchmarkTaskPtrOutputWithContext(context.Background())
}

func (o BenchmarkTaskOutput) ToBenchmarkTaskPtrOutputWithContext(ctx context.Context) BenchmarkTaskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BenchmarkTask) *BenchmarkTask {
		return &v
	}).(BenchmarkTaskPtrOutput)
}

type BenchmarkTaskPtrOutput struct{ *pulumi.OutputState }

func (BenchmarkTaskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BenchmarkTask)(nil))
}

func (o BenchmarkTaskPtrOutput) ToBenchmarkTaskPtrOutput() BenchmarkTaskPtrOutput {
	return o
}

func (o BenchmarkTaskPtrOutput) ToBenchmarkTaskPtrOutputWithContext(ctx context.Context) BenchmarkTaskPtrOutput {
	return o
}

func (o BenchmarkTaskPtrOutput) Elem() BenchmarkTaskOutput {
	return o.ApplyT(func(v *BenchmarkTask) BenchmarkTask {
		if v != nil {
			return *v
		}
		var ret BenchmarkTask
		return ret
	}).(BenchmarkTaskOutput)
}

type BenchmarkTaskArrayOutput struct{ *pulumi.OutputState }

func (BenchmarkTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BenchmarkTask)(nil))
}

func (o BenchmarkTaskArrayOutput) ToBenchmarkTaskArrayOutput() BenchmarkTaskArrayOutput {
	return o
}

func (o BenchmarkTaskArrayOutput) ToBenchmarkTaskArrayOutputWithContext(ctx context.Context) BenchmarkTaskArrayOutput {
	return o
}

func (o BenchmarkTaskArrayOutput) Index(i pulumi.IntInput) BenchmarkTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BenchmarkTask {
		return vs[0].([]BenchmarkTask)[vs[1].(int)]
	}).(BenchmarkTaskOutput)
}

type BenchmarkTaskMapOutput struct{ *pulumi.OutputState }

func (BenchmarkTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BenchmarkTask)(nil))
}

func (o BenchmarkTaskMapOutput) ToBenchmarkTaskMapOutput() BenchmarkTaskMapOutput {
	return o
}

func (o BenchmarkTaskMapOutput) ToBenchmarkTaskMapOutputWithContext(ctx context.Context) BenchmarkTaskMapOutput {
	return o
}

func (o BenchmarkTaskMapOutput) MapIndex(k pulumi.StringInput) BenchmarkTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) BenchmarkTask {
		return vs[0].(map[string]BenchmarkTask)[vs[1].(string)]
	}).(BenchmarkTaskOutput)
}

func init() {
	pulumi.RegisterOutputType(BenchmarkTaskOutput{})
	pulumi.RegisterOutputType(BenchmarkTaskPtrOutput{})
	pulumi.RegisterOutputType(BenchmarkTaskArrayOutput{})
	pulumi.RegisterOutputType(BenchmarkTaskMapOutput{})
}
