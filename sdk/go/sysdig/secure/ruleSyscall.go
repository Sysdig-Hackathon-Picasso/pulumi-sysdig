// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secure

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RuleSyscall struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput   `pulumi:"description"`
	Matching    pulumi.BoolPtrOutput     `pulumi:"matching"`
	Name        pulumi.StringOutput      `pulumi:"name"`
	Syscalls    pulumi.StringArrayOutput `pulumi:"syscalls"`
	Tags        pulumi.StringArrayOutput `pulumi:"tags"`
	Version     pulumi.IntOutput         `pulumi:"version"`
}

// NewRuleSyscall registers a new resource with the given unique name, arguments, and options.
func NewRuleSyscall(ctx *pulumi.Context,
	name string, args *RuleSyscallArgs, opts ...pulumi.ResourceOption) (*RuleSyscall, error) {
	if args == nil {
		args = &RuleSyscallArgs{}
	}

	var resource RuleSyscall
	err := ctx.RegisterResource("sysdig:Secure/ruleSyscall:RuleSyscall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleSyscall gets an existing RuleSyscall resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleSyscall(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleSyscallState, opts ...pulumi.ResourceOption) (*RuleSyscall, error) {
	var resource RuleSyscall
	err := ctx.ReadResource("sysdig:Secure/ruleSyscall:RuleSyscall", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleSyscall resources.
type ruleSyscallState struct {
	Description *string  `pulumi:"description"`
	Matching    *bool    `pulumi:"matching"`
	Name        *string  `pulumi:"name"`
	Syscalls    []string `pulumi:"syscalls"`
	Tags        []string `pulumi:"tags"`
	Version     *int     `pulumi:"version"`
}

type RuleSyscallState struct {
	Description pulumi.StringPtrInput
	Matching    pulumi.BoolPtrInput
	Name        pulumi.StringPtrInput
	Syscalls    pulumi.StringArrayInput
	Tags        pulumi.StringArrayInput
	Version     pulumi.IntPtrInput
}

func (RuleSyscallState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleSyscallState)(nil)).Elem()
}

type ruleSyscallArgs struct {
	Description *string  `pulumi:"description"`
	Matching    *bool    `pulumi:"matching"`
	Name        *string  `pulumi:"name"`
	Syscalls    []string `pulumi:"syscalls"`
	Tags        []string `pulumi:"tags"`
}

// The set of arguments for constructing a RuleSyscall resource.
type RuleSyscallArgs struct {
	Description pulumi.StringPtrInput
	Matching    pulumi.BoolPtrInput
	Name        pulumi.StringPtrInput
	Syscalls    pulumi.StringArrayInput
	Tags        pulumi.StringArrayInput
}

func (RuleSyscallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleSyscallArgs)(nil)).Elem()
}

type RuleSyscallInput interface {
	pulumi.Input

	ToRuleSyscallOutput() RuleSyscallOutput
	ToRuleSyscallOutputWithContext(ctx context.Context) RuleSyscallOutput
}

func (*RuleSyscall) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSyscall)(nil))
}

func (i *RuleSyscall) ToRuleSyscallOutput() RuleSyscallOutput {
	return i.ToRuleSyscallOutputWithContext(context.Background())
}

func (i *RuleSyscall) ToRuleSyscallOutputWithContext(ctx context.Context) RuleSyscallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSyscallOutput)
}

func (i *RuleSyscall) ToRuleSyscallPtrOutput() RuleSyscallPtrOutput {
	return i.ToRuleSyscallPtrOutputWithContext(context.Background())
}

func (i *RuleSyscall) ToRuleSyscallPtrOutputWithContext(ctx context.Context) RuleSyscallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSyscallPtrOutput)
}

type RuleSyscallPtrInput interface {
	pulumi.Input

	ToRuleSyscallPtrOutput() RuleSyscallPtrOutput
	ToRuleSyscallPtrOutputWithContext(ctx context.Context) RuleSyscallPtrOutput
}

type ruleSyscallPtrType RuleSyscallArgs

func (*ruleSyscallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleSyscall)(nil))
}

func (i *ruleSyscallPtrType) ToRuleSyscallPtrOutput() RuleSyscallPtrOutput {
	return i.ToRuleSyscallPtrOutputWithContext(context.Background())
}

func (i *ruleSyscallPtrType) ToRuleSyscallPtrOutputWithContext(ctx context.Context) RuleSyscallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSyscallPtrOutput)
}

// RuleSyscallArrayInput is an input type that accepts RuleSyscallArray and RuleSyscallArrayOutput values.
// You can construct a concrete instance of `RuleSyscallArrayInput` via:
//
//          RuleSyscallArray{ RuleSyscallArgs{...} }
type RuleSyscallArrayInput interface {
	pulumi.Input

	ToRuleSyscallArrayOutput() RuleSyscallArrayOutput
	ToRuleSyscallArrayOutputWithContext(context.Context) RuleSyscallArrayOutput
}

type RuleSyscallArray []RuleSyscallInput

func (RuleSyscallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleSyscall)(nil)).Elem()
}

func (i RuleSyscallArray) ToRuleSyscallArrayOutput() RuleSyscallArrayOutput {
	return i.ToRuleSyscallArrayOutputWithContext(context.Background())
}

func (i RuleSyscallArray) ToRuleSyscallArrayOutputWithContext(ctx context.Context) RuleSyscallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSyscallArrayOutput)
}

// RuleSyscallMapInput is an input type that accepts RuleSyscallMap and RuleSyscallMapOutput values.
// You can construct a concrete instance of `RuleSyscallMapInput` via:
//
//          RuleSyscallMap{ "key": RuleSyscallArgs{...} }
type RuleSyscallMapInput interface {
	pulumi.Input

	ToRuleSyscallMapOutput() RuleSyscallMapOutput
	ToRuleSyscallMapOutputWithContext(context.Context) RuleSyscallMapOutput
}

type RuleSyscallMap map[string]RuleSyscallInput

func (RuleSyscallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleSyscall)(nil)).Elem()
}

func (i RuleSyscallMap) ToRuleSyscallMapOutput() RuleSyscallMapOutput {
	return i.ToRuleSyscallMapOutputWithContext(context.Background())
}

func (i RuleSyscallMap) ToRuleSyscallMapOutputWithContext(ctx context.Context) RuleSyscallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSyscallMapOutput)
}

type RuleSyscallOutput struct{ *pulumi.OutputState }

func (RuleSyscallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSyscall)(nil))
}

func (o RuleSyscallOutput) ToRuleSyscallOutput() RuleSyscallOutput {
	return o
}

func (o RuleSyscallOutput) ToRuleSyscallOutputWithContext(ctx context.Context) RuleSyscallOutput {
	return o
}

func (o RuleSyscallOutput) ToRuleSyscallPtrOutput() RuleSyscallPtrOutput {
	return o.ToRuleSyscallPtrOutputWithContext(context.Background())
}

func (o RuleSyscallOutput) ToRuleSyscallPtrOutputWithContext(ctx context.Context) RuleSyscallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleSyscall) *RuleSyscall {
		return &v
	}).(RuleSyscallPtrOutput)
}

type RuleSyscallPtrOutput struct{ *pulumi.OutputState }

func (RuleSyscallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleSyscall)(nil))
}

func (o RuleSyscallPtrOutput) ToRuleSyscallPtrOutput() RuleSyscallPtrOutput {
	return o
}

func (o RuleSyscallPtrOutput) ToRuleSyscallPtrOutputWithContext(ctx context.Context) RuleSyscallPtrOutput {
	return o
}

func (o RuleSyscallPtrOutput) Elem() RuleSyscallOutput {
	return o.ApplyT(func(v *RuleSyscall) RuleSyscall {
		if v != nil {
			return *v
		}
		var ret RuleSyscall
		return ret
	}).(RuleSyscallOutput)
}

type RuleSyscallArrayOutput struct{ *pulumi.OutputState }

func (RuleSyscallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleSyscall)(nil))
}

func (o RuleSyscallArrayOutput) ToRuleSyscallArrayOutput() RuleSyscallArrayOutput {
	return o
}

func (o RuleSyscallArrayOutput) ToRuleSyscallArrayOutputWithContext(ctx context.Context) RuleSyscallArrayOutput {
	return o
}

func (o RuleSyscallArrayOutput) Index(i pulumi.IntInput) RuleSyscallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleSyscall {
		return vs[0].([]RuleSyscall)[vs[1].(int)]
	}).(RuleSyscallOutput)
}

type RuleSyscallMapOutput struct{ *pulumi.OutputState }

func (RuleSyscallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RuleSyscall)(nil))
}

func (o RuleSyscallMapOutput) ToRuleSyscallMapOutput() RuleSyscallMapOutput {
	return o
}

func (o RuleSyscallMapOutput) ToRuleSyscallMapOutputWithContext(ctx context.Context) RuleSyscallMapOutput {
	return o
}

func (o RuleSyscallMapOutput) MapIndex(k pulumi.StringInput) RuleSyscallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RuleSyscall {
		return vs[0].(map[string]RuleSyscall)[vs[1].(string)]
	}).(RuleSyscallOutput)
}

func init() {
	pulumi.RegisterOutputType(RuleSyscallOutput{})
	pulumi.RegisterOutputType(RuleSyscallPtrOutput{})
	pulumi.RegisterOutputType(RuleSyscallArrayOutput{})
	pulumi.RegisterOutputType(RuleSyscallMapOutput{})
}
