// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secure

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Secure filesystem runtime rules can be imported using the ID, e.g.
//
// ```sh
//  $ pulumi import sysdig:Secure/ruleFilesystem:RuleFilesystem example 12345
// ```
type RuleFilesystem struct {
	pulumi.CustomResourceState

	// The description of Secure rule. By default is empty.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Secure rule. It must be unique.
	Name       pulumi.StringOutput                `pulumi:"name"`
	ReadOnlies RuleFilesystemReadOnlyArrayOutput  `pulumi:"readOnlies"`
	ReadWrites RuleFilesystemReadWriteArrayOutput `pulumi:"readWrites"`
	// A list of tags for this rule.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Current version of the resource in Sysdig Secure.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewRuleFilesystem registers a new resource with the given unique name, arguments, and options.
func NewRuleFilesystem(ctx *pulumi.Context,
	name string, args *RuleFilesystemArgs, opts ...pulumi.ResourceOption) (*RuleFilesystem, error) {
	if args == nil {
		args = &RuleFilesystemArgs{}
	}

	var resource RuleFilesystem
	err := ctx.RegisterResource("sysdig:Secure/ruleFilesystem:RuleFilesystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleFilesystem gets an existing RuleFilesystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleFilesystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleFilesystemState, opts ...pulumi.ResourceOption) (*RuleFilesystem, error) {
	var resource RuleFilesystem
	err := ctx.ReadResource("sysdig:Secure/ruleFilesystem:RuleFilesystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleFilesystem resources.
type ruleFilesystemState struct {
	// The description of Secure rule. By default is empty.
	Description *string `pulumi:"description"`
	// The name of the Secure rule. It must be unique.
	Name       *string                   `pulumi:"name"`
	ReadOnlies []RuleFilesystemReadOnly  `pulumi:"readOnlies"`
	ReadWrites []RuleFilesystemReadWrite `pulumi:"readWrites"`
	// A list of tags for this rule.
	Tags []string `pulumi:"tags"`
	// Current version of the resource in Sysdig Secure.
	Version *int `pulumi:"version"`
}

type RuleFilesystemState struct {
	// The description of Secure rule. By default is empty.
	Description pulumi.StringPtrInput
	// The name of the Secure rule. It must be unique.
	Name       pulumi.StringPtrInput
	ReadOnlies RuleFilesystemReadOnlyArrayInput
	ReadWrites RuleFilesystemReadWriteArrayInput
	// A list of tags for this rule.
	Tags pulumi.StringArrayInput
	// Current version of the resource in Sysdig Secure.
	Version pulumi.IntPtrInput
}

func (RuleFilesystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleFilesystemState)(nil)).Elem()
}

type ruleFilesystemArgs struct {
	// The description of Secure rule. By default is empty.
	Description *string `pulumi:"description"`
	// The name of the Secure rule. It must be unique.
	Name       *string                   `pulumi:"name"`
	ReadOnlies []RuleFilesystemReadOnly  `pulumi:"readOnlies"`
	ReadWrites []RuleFilesystemReadWrite `pulumi:"readWrites"`
	// A list of tags for this rule.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a RuleFilesystem resource.
type RuleFilesystemArgs struct {
	// The description of Secure rule. By default is empty.
	Description pulumi.StringPtrInput
	// The name of the Secure rule. It must be unique.
	Name       pulumi.StringPtrInput
	ReadOnlies RuleFilesystemReadOnlyArrayInput
	ReadWrites RuleFilesystemReadWriteArrayInput
	// A list of tags for this rule.
	Tags pulumi.StringArrayInput
}

func (RuleFilesystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleFilesystemArgs)(nil)).Elem()
}

type RuleFilesystemInput interface {
	pulumi.Input

	ToRuleFilesystemOutput() RuleFilesystemOutput
	ToRuleFilesystemOutputWithContext(ctx context.Context) RuleFilesystemOutput
}

func (*RuleFilesystem) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleFilesystem)(nil))
}

func (i *RuleFilesystem) ToRuleFilesystemOutput() RuleFilesystemOutput {
	return i.ToRuleFilesystemOutputWithContext(context.Background())
}

func (i *RuleFilesystem) ToRuleFilesystemOutputWithContext(ctx context.Context) RuleFilesystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFilesystemOutput)
}

func (i *RuleFilesystem) ToRuleFilesystemPtrOutput() RuleFilesystemPtrOutput {
	return i.ToRuleFilesystemPtrOutputWithContext(context.Background())
}

func (i *RuleFilesystem) ToRuleFilesystemPtrOutputWithContext(ctx context.Context) RuleFilesystemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFilesystemPtrOutput)
}

type RuleFilesystemPtrInput interface {
	pulumi.Input

	ToRuleFilesystemPtrOutput() RuleFilesystemPtrOutput
	ToRuleFilesystemPtrOutputWithContext(ctx context.Context) RuleFilesystemPtrOutput
}

type ruleFilesystemPtrType RuleFilesystemArgs

func (*ruleFilesystemPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleFilesystem)(nil))
}

func (i *ruleFilesystemPtrType) ToRuleFilesystemPtrOutput() RuleFilesystemPtrOutput {
	return i.ToRuleFilesystemPtrOutputWithContext(context.Background())
}

func (i *ruleFilesystemPtrType) ToRuleFilesystemPtrOutputWithContext(ctx context.Context) RuleFilesystemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFilesystemPtrOutput)
}

// RuleFilesystemArrayInput is an input type that accepts RuleFilesystemArray and RuleFilesystemArrayOutput values.
// You can construct a concrete instance of `RuleFilesystemArrayInput` via:
//
//          RuleFilesystemArray{ RuleFilesystemArgs{...} }
type RuleFilesystemArrayInput interface {
	pulumi.Input

	ToRuleFilesystemArrayOutput() RuleFilesystemArrayOutput
	ToRuleFilesystemArrayOutputWithContext(context.Context) RuleFilesystemArrayOutput
}

type RuleFilesystemArray []RuleFilesystemInput

func (RuleFilesystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleFilesystem)(nil)).Elem()
}

func (i RuleFilesystemArray) ToRuleFilesystemArrayOutput() RuleFilesystemArrayOutput {
	return i.ToRuleFilesystemArrayOutputWithContext(context.Background())
}

func (i RuleFilesystemArray) ToRuleFilesystemArrayOutputWithContext(ctx context.Context) RuleFilesystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFilesystemArrayOutput)
}

// RuleFilesystemMapInput is an input type that accepts RuleFilesystemMap and RuleFilesystemMapOutput values.
// You can construct a concrete instance of `RuleFilesystemMapInput` via:
//
//          RuleFilesystemMap{ "key": RuleFilesystemArgs{...} }
type RuleFilesystemMapInput interface {
	pulumi.Input

	ToRuleFilesystemMapOutput() RuleFilesystemMapOutput
	ToRuleFilesystemMapOutputWithContext(context.Context) RuleFilesystemMapOutput
}

type RuleFilesystemMap map[string]RuleFilesystemInput

func (RuleFilesystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleFilesystem)(nil)).Elem()
}

func (i RuleFilesystemMap) ToRuleFilesystemMapOutput() RuleFilesystemMapOutput {
	return i.ToRuleFilesystemMapOutputWithContext(context.Background())
}

func (i RuleFilesystemMap) ToRuleFilesystemMapOutputWithContext(ctx context.Context) RuleFilesystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFilesystemMapOutput)
}

type RuleFilesystemOutput struct{ *pulumi.OutputState }

func (RuleFilesystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleFilesystem)(nil))
}

func (o RuleFilesystemOutput) ToRuleFilesystemOutput() RuleFilesystemOutput {
	return o
}

func (o RuleFilesystemOutput) ToRuleFilesystemOutputWithContext(ctx context.Context) RuleFilesystemOutput {
	return o
}

func (o RuleFilesystemOutput) ToRuleFilesystemPtrOutput() RuleFilesystemPtrOutput {
	return o.ToRuleFilesystemPtrOutputWithContext(context.Background())
}

func (o RuleFilesystemOutput) ToRuleFilesystemPtrOutputWithContext(ctx context.Context) RuleFilesystemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleFilesystem) *RuleFilesystem {
		return &v
	}).(RuleFilesystemPtrOutput)
}

type RuleFilesystemPtrOutput struct{ *pulumi.OutputState }

func (RuleFilesystemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleFilesystem)(nil))
}

func (o RuleFilesystemPtrOutput) ToRuleFilesystemPtrOutput() RuleFilesystemPtrOutput {
	return o
}

func (o RuleFilesystemPtrOutput) ToRuleFilesystemPtrOutputWithContext(ctx context.Context) RuleFilesystemPtrOutput {
	return o
}

func (o RuleFilesystemPtrOutput) Elem() RuleFilesystemOutput {
	return o.ApplyT(func(v *RuleFilesystem) RuleFilesystem {
		if v != nil {
			return *v
		}
		var ret RuleFilesystem
		return ret
	}).(RuleFilesystemOutput)
}

type RuleFilesystemArrayOutput struct{ *pulumi.OutputState }

func (RuleFilesystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleFilesystem)(nil))
}

func (o RuleFilesystemArrayOutput) ToRuleFilesystemArrayOutput() RuleFilesystemArrayOutput {
	return o
}

func (o RuleFilesystemArrayOutput) ToRuleFilesystemArrayOutputWithContext(ctx context.Context) RuleFilesystemArrayOutput {
	return o
}

func (o RuleFilesystemArrayOutput) Index(i pulumi.IntInput) RuleFilesystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleFilesystem {
		return vs[0].([]RuleFilesystem)[vs[1].(int)]
	}).(RuleFilesystemOutput)
}

type RuleFilesystemMapOutput struct{ *pulumi.OutputState }

func (RuleFilesystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RuleFilesystem)(nil))
}

func (o RuleFilesystemMapOutput) ToRuleFilesystemMapOutput() RuleFilesystemMapOutput {
	return o
}

func (o RuleFilesystemMapOutput) ToRuleFilesystemMapOutputWithContext(ctx context.Context) RuleFilesystemMapOutput {
	return o
}

func (o RuleFilesystemMapOutput) MapIndex(k pulumi.StringInput) RuleFilesystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RuleFilesystem {
		return vs[0].(map[string]RuleFilesystem)[vs[1].(string)]
	}).(RuleFilesystemOutput)
}

func init() {
	pulumi.RegisterOutputType(RuleFilesystemOutput{})
	pulumi.RegisterOutputType(RuleFilesystemPtrOutput{})
	pulumi.RegisterOutputType(RuleFilesystemArrayOutput{})
	pulumi.RegisterOutputType(RuleFilesystemMapOutput{})
}
