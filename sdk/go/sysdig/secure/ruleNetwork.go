// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secure

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Secure network runtime rules can be imported using the ID, e.g.
//
// ```sh
//  $ pulumi import sysdig:Secure/ruleNetwork:RuleNetwork example 12345
// ```
type RuleNetwork struct {
	pulumi.CustomResourceState

	// Detect if there is an inbound connection.
	BlockInbound pulumi.BoolOutput `pulumi:"blockInbound"`
	// Detect if there is an outbound connection.
	BlockOutbound pulumi.BoolOutput `pulumi:"blockOutbound"`
	// The description of Secure rule. By default is empty.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Secure rule. It must be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of tags for this rule.
	Tags pulumi.StringArrayOutput  `pulumi:"tags"`
	Tcps RuleNetworkTcpArrayOutput `pulumi:"tcps"`
	Udps RuleNetworkUdpArrayOutput `pulumi:"udps"`
	// Current version of the resource in Sysdig Secure.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewRuleNetwork registers a new resource with the given unique name, arguments, and options.
func NewRuleNetwork(ctx *pulumi.Context,
	name string, args *RuleNetworkArgs, opts ...pulumi.ResourceOption) (*RuleNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BlockInbound == nil {
		return nil, errors.New("invalid value for required argument 'BlockInbound'")
	}
	if args.BlockOutbound == nil {
		return nil, errors.New("invalid value for required argument 'BlockOutbound'")
	}
	var resource RuleNetwork
	err := ctx.RegisterResource("sysdig:Secure/ruleNetwork:RuleNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleNetwork gets an existing RuleNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleNetworkState, opts ...pulumi.ResourceOption) (*RuleNetwork, error) {
	var resource RuleNetwork
	err := ctx.ReadResource("sysdig:Secure/ruleNetwork:RuleNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleNetwork resources.
type ruleNetworkState struct {
	// Detect if there is an inbound connection.
	BlockInbound *bool `pulumi:"blockInbound"`
	// Detect if there is an outbound connection.
	BlockOutbound *bool `pulumi:"blockOutbound"`
	// The description of Secure rule. By default is empty.
	Description *string `pulumi:"description"`
	// The name of the Secure rule. It must be unique.
	Name *string `pulumi:"name"`
	// A list of tags for this rule.
	Tags []string         `pulumi:"tags"`
	Tcps []RuleNetworkTcp `pulumi:"tcps"`
	Udps []RuleNetworkUdp `pulumi:"udps"`
	// Current version of the resource in Sysdig Secure.
	Version *int `pulumi:"version"`
}

type RuleNetworkState struct {
	// Detect if there is an inbound connection.
	BlockInbound pulumi.BoolPtrInput
	// Detect if there is an outbound connection.
	BlockOutbound pulumi.BoolPtrInput
	// The description of Secure rule. By default is empty.
	Description pulumi.StringPtrInput
	// The name of the Secure rule. It must be unique.
	Name pulumi.StringPtrInput
	// A list of tags for this rule.
	Tags pulumi.StringArrayInput
	Tcps RuleNetworkTcpArrayInput
	Udps RuleNetworkUdpArrayInput
	// Current version of the resource in Sysdig Secure.
	Version pulumi.IntPtrInput
}

func (RuleNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleNetworkState)(nil)).Elem()
}

type ruleNetworkArgs struct {
	// Detect if there is an inbound connection.
	BlockInbound bool `pulumi:"blockInbound"`
	// Detect if there is an outbound connection.
	BlockOutbound bool `pulumi:"blockOutbound"`
	// The description of Secure rule. By default is empty.
	Description *string `pulumi:"description"`
	// The name of the Secure rule. It must be unique.
	Name *string `pulumi:"name"`
	// A list of tags for this rule.
	Tags []string         `pulumi:"tags"`
	Tcps []RuleNetworkTcp `pulumi:"tcps"`
	Udps []RuleNetworkUdp `pulumi:"udps"`
}

// The set of arguments for constructing a RuleNetwork resource.
type RuleNetworkArgs struct {
	// Detect if there is an inbound connection.
	BlockInbound pulumi.BoolInput
	// Detect if there is an outbound connection.
	BlockOutbound pulumi.BoolInput
	// The description of Secure rule. By default is empty.
	Description pulumi.StringPtrInput
	// The name of the Secure rule. It must be unique.
	Name pulumi.StringPtrInput
	// A list of tags for this rule.
	Tags pulumi.StringArrayInput
	Tcps RuleNetworkTcpArrayInput
	Udps RuleNetworkUdpArrayInput
}

func (RuleNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleNetworkArgs)(nil)).Elem()
}

type RuleNetworkInput interface {
	pulumi.Input

	ToRuleNetworkOutput() RuleNetworkOutput
	ToRuleNetworkOutputWithContext(ctx context.Context) RuleNetworkOutput
}

func (*RuleNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleNetwork)(nil))
}

func (i *RuleNetwork) ToRuleNetworkOutput() RuleNetworkOutput {
	return i.ToRuleNetworkOutputWithContext(context.Background())
}

func (i *RuleNetwork) ToRuleNetworkOutputWithContext(ctx context.Context) RuleNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleNetworkOutput)
}

func (i *RuleNetwork) ToRuleNetworkPtrOutput() RuleNetworkPtrOutput {
	return i.ToRuleNetworkPtrOutputWithContext(context.Background())
}

func (i *RuleNetwork) ToRuleNetworkPtrOutputWithContext(ctx context.Context) RuleNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleNetworkPtrOutput)
}

type RuleNetworkPtrInput interface {
	pulumi.Input

	ToRuleNetworkPtrOutput() RuleNetworkPtrOutput
	ToRuleNetworkPtrOutputWithContext(ctx context.Context) RuleNetworkPtrOutput
}

type ruleNetworkPtrType RuleNetworkArgs

func (*ruleNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleNetwork)(nil))
}

func (i *ruleNetworkPtrType) ToRuleNetworkPtrOutput() RuleNetworkPtrOutput {
	return i.ToRuleNetworkPtrOutputWithContext(context.Background())
}

func (i *ruleNetworkPtrType) ToRuleNetworkPtrOutputWithContext(ctx context.Context) RuleNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleNetworkPtrOutput)
}

// RuleNetworkArrayInput is an input type that accepts RuleNetworkArray and RuleNetworkArrayOutput values.
// You can construct a concrete instance of `RuleNetworkArrayInput` via:
//
//          RuleNetworkArray{ RuleNetworkArgs{...} }
type RuleNetworkArrayInput interface {
	pulumi.Input

	ToRuleNetworkArrayOutput() RuleNetworkArrayOutput
	ToRuleNetworkArrayOutputWithContext(context.Context) RuleNetworkArrayOutput
}

type RuleNetworkArray []RuleNetworkInput

func (RuleNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleNetwork)(nil)).Elem()
}

func (i RuleNetworkArray) ToRuleNetworkArrayOutput() RuleNetworkArrayOutput {
	return i.ToRuleNetworkArrayOutputWithContext(context.Background())
}

func (i RuleNetworkArray) ToRuleNetworkArrayOutputWithContext(ctx context.Context) RuleNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleNetworkArrayOutput)
}

// RuleNetworkMapInput is an input type that accepts RuleNetworkMap and RuleNetworkMapOutput values.
// You can construct a concrete instance of `RuleNetworkMapInput` via:
//
//          RuleNetworkMap{ "key": RuleNetworkArgs{...} }
type RuleNetworkMapInput interface {
	pulumi.Input

	ToRuleNetworkMapOutput() RuleNetworkMapOutput
	ToRuleNetworkMapOutputWithContext(context.Context) RuleNetworkMapOutput
}

type RuleNetworkMap map[string]RuleNetworkInput

func (RuleNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleNetwork)(nil)).Elem()
}

func (i RuleNetworkMap) ToRuleNetworkMapOutput() RuleNetworkMapOutput {
	return i.ToRuleNetworkMapOutputWithContext(context.Background())
}

func (i RuleNetworkMap) ToRuleNetworkMapOutputWithContext(ctx context.Context) RuleNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleNetworkMapOutput)
}

type RuleNetworkOutput struct{ *pulumi.OutputState }

func (RuleNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleNetwork)(nil))
}

func (o RuleNetworkOutput) ToRuleNetworkOutput() RuleNetworkOutput {
	return o
}

func (o RuleNetworkOutput) ToRuleNetworkOutputWithContext(ctx context.Context) RuleNetworkOutput {
	return o
}

func (o RuleNetworkOutput) ToRuleNetworkPtrOutput() RuleNetworkPtrOutput {
	return o.ToRuleNetworkPtrOutputWithContext(context.Background())
}

func (o RuleNetworkOutput) ToRuleNetworkPtrOutputWithContext(ctx context.Context) RuleNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleNetwork) *RuleNetwork {
		return &v
	}).(RuleNetworkPtrOutput)
}

type RuleNetworkPtrOutput struct{ *pulumi.OutputState }

func (RuleNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleNetwork)(nil))
}

func (o RuleNetworkPtrOutput) ToRuleNetworkPtrOutput() RuleNetworkPtrOutput {
	return o
}

func (o RuleNetworkPtrOutput) ToRuleNetworkPtrOutputWithContext(ctx context.Context) RuleNetworkPtrOutput {
	return o
}

func (o RuleNetworkPtrOutput) Elem() RuleNetworkOutput {
	return o.ApplyT(func(v *RuleNetwork) RuleNetwork {
		if v != nil {
			return *v
		}
		var ret RuleNetwork
		return ret
	}).(RuleNetworkOutput)
}

type RuleNetworkArrayOutput struct{ *pulumi.OutputState }

func (RuleNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleNetwork)(nil))
}

func (o RuleNetworkArrayOutput) ToRuleNetworkArrayOutput() RuleNetworkArrayOutput {
	return o
}

func (o RuleNetworkArrayOutput) ToRuleNetworkArrayOutputWithContext(ctx context.Context) RuleNetworkArrayOutput {
	return o
}

func (o RuleNetworkArrayOutput) Index(i pulumi.IntInput) RuleNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleNetwork {
		return vs[0].([]RuleNetwork)[vs[1].(int)]
	}).(RuleNetworkOutput)
}

type RuleNetworkMapOutput struct{ *pulumi.OutputState }

func (RuleNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RuleNetwork)(nil))
}

func (o RuleNetworkMapOutput) ToRuleNetworkMapOutput() RuleNetworkMapOutput {
	return o
}

func (o RuleNetworkMapOutput) ToRuleNetworkMapOutputWithContext(ctx context.Context) RuleNetworkMapOutput {
	return o
}

func (o RuleNetworkMapOutput) MapIndex(k pulumi.StringInput) RuleNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RuleNetwork {
		return vs[0].(map[string]RuleNetwork)[vs[1].(string)]
	}).(RuleNetworkOutput)
}

func init() {
	pulumi.RegisterOutputType(RuleNetworkOutput{})
	pulumi.RegisterOutputType(RuleNetworkPtrOutput{})
	pulumi.RegisterOutputType(RuleNetworkArrayOutput{})
	pulumi.RegisterOutputType(RuleNetworkMapOutput{})
}
