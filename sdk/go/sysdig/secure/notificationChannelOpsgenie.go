// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secure

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Opsgenie notification channels for Secure can be imported using the ID, e.g.
//
// ```sh
//  $ pulumi import sysdig:Secure/notificationChannelOpsgenie:NotificationChannelOpsgenie example 12345
// ```
type NotificationChannelOpsgenie struct {
	pulumi.CustomResourceState

	// Key for the API.
	ApiKey pulumi.StringOutput `pulumi:"apiKey"`
	// If false, the channel will not emit notifications. Default is true.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The name of the Notification Channel. Must be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// Send a new notification when the alert condition is
	// no longer triggered. Default is false.
	NotifyWhenOk pulumi.BoolOutput `pulumi:"notifyWhenOk"`
	// Send a new notification when the alert is manually
	// acknowledged by a user. Default is false.
	NotifyWhenResolved pulumi.BoolOutput `pulumi:"notifyWhenResolved"`
	// Send an initial test notification to check
	// if the notification channel is working. Default is false.
	SendTestNotification pulumi.BoolPtrOutput `pulumi:"sendTestNotification"`
	// (Computed) The current version of the Notification Channel.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewNotificationChannelOpsgenie registers a new resource with the given unique name, arguments, and options.
func NewNotificationChannelOpsgenie(ctx *pulumi.Context,
	name string, args *NotificationChannelOpsgenieArgs, opts ...pulumi.ResourceOption) (*NotificationChannelOpsgenie, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiKey'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.NotifyWhenOk == nil {
		return nil, errors.New("invalid value for required argument 'NotifyWhenOk'")
	}
	if args.NotifyWhenResolved == nil {
		return nil, errors.New("invalid value for required argument 'NotifyWhenResolved'")
	}
	var resource NotificationChannelOpsgenie
	err := ctx.RegisterResource("sysdig:Secure/notificationChannelOpsgenie:NotificationChannelOpsgenie", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationChannelOpsgenie gets an existing NotificationChannelOpsgenie resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationChannelOpsgenie(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationChannelOpsgenieState, opts ...pulumi.ResourceOption) (*NotificationChannelOpsgenie, error) {
	var resource NotificationChannelOpsgenie
	err := ctx.ReadResource("sysdig:Secure/notificationChannelOpsgenie:NotificationChannelOpsgenie", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationChannelOpsgenie resources.
type notificationChannelOpsgenieState struct {
	// Key for the API.
	ApiKey *string `pulumi:"apiKey"`
	// If false, the channel will not emit notifications. Default is true.
	Enabled *bool `pulumi:"enabled"`
	// The name of the Notification Channel. Must be unique.
	Name *string `pulumi:"name"`
	// Send a new notification when the alert condition is
	// no longer triggered. Default is false.
	NotifyWhenOk *bool `pulumi:"notifyWhenOk"`
	// Send a new notification when the alert is manually
	// acknowledged by a user. Default is false.
	NotifyWhenResolved *bool `pulumi:"notifyWhenResolved"`
	// Send an initial test notification to check
	// if the notification channel is working. Default is false.
	SendTestNotification *bool `pulumi:"sendTestNotification"`
	// (Computed) The current version of the Notification Channel.
	Version *int `pulumi:"version"`
}

type NotificationChannelOpsgenieState struct {
	// Key for the API.
	ApiKey pulumi.StringPtrInput
	// If false, the channel will not emit notifications. Default is true.
	Enabled pulumi.BoolPtrInput
	// The name of the Notification Channel. Must be unique.
	Name pulumi.StringPtrInput
	// Send a new notification when the alert condition is
	// no longer triggered. Default is false.
	NotifyWhenOk pulumi.BoolPtrInput
	// Send a new notification when the alert is manually
	// acknowledged by a user. Default is false.
	NotifyWhenResolved pulumi.BoolPtrInput
	// Send an initial test notification to check
	// if the notification channel is working. Default is false.
	SendTestNotification pulumi.BoolPtrInput
	// (Computed) The current version of the Notification Channel.
	Version pulumi.IntPtrInput
}

func (NotificationChannelOpsgenieState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationChannelOpsgenieState)(nil)).Elem()
}

type notificationChannelOpsgenieArgs struct {
	// Key for the API.
	ApiKey string `pulumi:"apiKey"`
	// If false, the channel will not emit notifications. Default is true.
	Enabled bool `pulumi:"enabled"`
	// The name of the Notification Channel. Must be unique.
	Name *string `pulumi:"name"`
	// Send a new notification when the alert condition is
	// no longer triggered. Default is false.
	NotifyWhenOk bool `pulumi:"notifyWhenOk"`
	// Send a new notification when the alert is manually
	// acknowledged by a user. Default is false.
	NotifyWhenResolved bool `pulumi:"notifyWhenResolved"`
	// Send an initial test notification to check
	// if the notification channel is working. Default is false.
	SendTestNotification *bool `pulumi:"sendTestNotification"`
}

// The set of arguments for constructing a NotificationChannelOpsgenie resource.
type NotificationChannelOpsgenieArgs struct {
	// Key for the API.
	ApiKey pulumi.StringInput
	// If false, the channel will not emit notifications. Default is true.
	Enabled pulumi.BoolInput
	// The name of the Notification Channel. Must be unique.
	Name pulumi.StringPtrInput
	// Send a new notification when the alert condition is
	// no longer triggered. Default is false.
	NotifyWhenOk pulumi.BoolInput
	// Send a new notification when the alert is manually
	// acknowledged by a user. Default is false.
	NotifyWhenResolved pulumi.BoolInput
	// Send an initial test notification to check
	// if the notification channel is working. Default is false.
	SendTestNotification pulumi.BoolPtrInput
}

func (NotificationChannelOpsgenieArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationChannelOpsgenieArgs)(nil)).Elem()
}

type NotificationChannelOpsgenieInput interface {
	pulumi.Input

	ToNotificationChannelOpsgenieOutput() NotificationChannelOpsgenieOutput
	ToNotificationChannelOpsgenieOutputWithContext(ctx context.Context) NotificationChannelOpsgenieOutput
}

func (*NotificationChannelOpsgenie) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationChannelOpsgenie)(nil))
}

func (i *NotificationChannelOpsgenie) ToNotificationChannelOpsgenieOutput() NotificationChannelOpsgenieOutput {
	return i.ToNotificationChannelOpsgenieOutputWithContext(context.Background())
}

func (i *NotificationChannelOpsgenie) ToNotificationChannelOpsgenieOutputWithContext(ctx context.Context) NotificationChannelOpsgenieOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelOpsgenieOutput)
}

func (i *NotificationChannelOpsgenie) ToNotificationChannelOpsgeniePtrOutput() NotificationChannelOpsgeniePtrOutput {
	return i.ToNotificationChannelOpsgeniePtrOutputWithContext(context.Background())
}

func (i *NotificationChannelOpsgenie) ToNotificationChannelOpsgeniePtrOutputWithContext(ctx context.Context) NotificationChannelOpsgeniePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelOpsgeniePtrOutput)
}

type NotificationChannelOpsgeniePtrInput interface {
	pulumi.Input

	ToNotificationChannelOpsgeniePtrOutput() NotificationChannelOpsgeniePtrOutput
	ToNotificationChannelOpsgeniePtrOutputWithContext(ctx context.Context) NotificationChannelOpsgeniePtrOutput
}

type notificationChannelOpsgeniePtrType NotificationChannelOpsgenieArgs

func (*notificationChannelOpsgeniePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationChannelOpsgenie)(nil))
}

func (i *notificationChannelOpsgeniePtrType) ToNotificationChannelOpsgeniePtrOutput() NotificationChannelOpsgeniePtrOutput {
	return i.ToNotificationChannelOpsgeniePtrOutputWithContext(context.Background())
}

func (i *notificationChannelOpsgeniePtrType) ToNotificationChannelOpsgeniePtrOutputWithContext(ctx context.Context) NotificationChannelOpsgeniePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelOpsgeniePtrOutput)
}

// NotificationChannelOpsgenieArrayInput is an input type that accepts NotificationChannelOpsgenieArray and NotificationChannelOpsgenieArrayOutput values.
// You can construct a concrete instance of `NotificationChannelOpsgenieArrayInput` via:
//
//          NotificationChannelOpsgenieArray{ NotificationChannelOpsgenieArgs{...} }
type NotificationChannelOpsgenieArrayInput interface {
	pulumi.Input

	ToNotificationChannelOpsgenieArrayOutput() NotificationChannelOpsgenieArrayOutput
	ToNotificationChannelOpsgenieArrayOutputWithContext(context.Context) NotificationChannelOpsgenieArrayOutput
}

type NotificationChannelOpsgenieArray []NotificationChannelOpsgenieInput

func (NotificationChannelOpsgenieArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationChannelOpsgenie)(nil)).Elem()
}

func (i NotificationChannelOpsgenieArray) ToNotificationChannelOpsgenieArrayOutput() NotificationChannelOpsgenieArrayOutput {
	return i.ToNotificationChannelOpsgenieArrayOutputWithContext(context.Background())
}

func (i NotificationChannelOpsgenieArray) ToNotificationChannelOpsgenieArrayOutputWithContext(ctx context.Context) NotificationChannelOpsgenieArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelOpsgenieArrayOutput)
}

// NotificationChannelOpsgenieMapInput is an input type that accepts NotificationChannelOpsgenieMap and NotificationChannelOpsgenieMapOutput values.
// You can construct a concrete instance of `NotificationChannelOpsgenieMapInput` via:
//
//          NotificationChannelOpsgenieMap{ "key": NotificationChannelOpsgenieArgs{...} }
type NotificationChannelOpsgenieMapInput interface {
	pulumi.Input

	ToNotificationChannelOpsgenieMapOutput() NotificationChannelOpsgenieMapOutput
	ToNotificationChannelOpsgenieMapOutputWithContext(context.Context) NotificationChannelOpsgenieMapOutput
}

type NotificationChannelOpsgenieMap map[string]NotificationChannelOpsgenieInput

func (NotificationChannelOpsgenieMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationChannelOpsgenie)(nil)).Elem()
}

func (i NotificationChannelOpsgenieMap) ToNotificationChannelOpsgenieMapOutput() NotificationChannelOpsgenieMapOutput {
	return i.ToNotificationChannelOpsgenieMapOutputWithContext(context.Background())
}

func (i NotificationChannelOpsgenieMap) ToNotificationChannelOpsgenieMapOutputWithContext(ctx context.Context) NotificationChannelOpsgenieMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelOpsgenieMapOutput)
}

type NotificationChannelOpsgenieOutput struct{ *pulumi.OutputState }

func (NotificationChannelOpsgenieOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationChannelOpsgenie)(nil))
}

func (o NotificationChannelOpsgenieOutput) ToNotificationChannelOpsgenieOutput() NotificationChannelOpsgenieOutput {
	return o
}

func (o NotificationChannelOpsgenieOutput) ToNotificationChannelOpsgenieOutputWithContext(ctx context.Context) NotificationChannelOpsgenieOutput {
	return o
}

func (o NotificationChannelOpsgenieOutput) ToNotificationChannelOpsgeniePtrOutput() NotificationChannelOpsgeniePtrOutput {
	return o.ToNotificationChannelOpsgeniePtrOutputWithContext(context.Background())
}

func (o NotificationChannelOpsgenieOutput) ToNotificationChannelOpsgeniePtrOutputWithContext(ctx context.Context) NotificationChannelOpsgeniePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationChannelOpsgenie) *NotificationChannelOpsgenie {
		return &v
	}).(NotificationChannelOpsgeniePtrOutput)
}

type NotificationChannelOpsgeniePtrOutput struct{ *pulumi.OutputState }

func (NotificationChannelOpsgeniePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationChannelOpsgenie)(nil))
}

func (o NotificationChannelOpsgeniePtrOutput) ToNotificationChannelOpsgeniePtrOutput() NotificationChannelOpsgeniePtrOutput {
	return o
}

func (o NotificationChannelOpsgeniePtrOutput) ToNotificationChannelOpsgeniePtrOutputWithContext(ctx context.Context) NotificationChannelOpsgeniePtrOutput {
	return o
}

func (o NotificationChannelOpsgeniePtrOutput) Elem() NotificationChannelOpsgenieOutput {
	return o.ApplyT(func(v *NotificationChannelOpsgenie) NotificationChannelOpsgenie {
		if v != nil {
			return *v
		}
		var ret NotificationChannelOpsgenie
		return ret
	}).(NotificationChannelOpsgenieOutput)
}

type NotificationChannelOpsgenieArrayOutput struct{ *pulumi.OutputState }

func (NotificationChannelOpsgenieArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationChannelOpsgenie)(nil))
}

func (o NotificationChannelOpsgenieArrayOutput) ToNotificationChannelOpsgenieArrayOutput() NotificationChannelOpsgenieArrayOutput {
	return o
}

func (o NotificationChannelOpsgenieArrayOutput) ToNotificationChannelOpsgenieArrayOutputWithContext(ctx context.Context) NotificationChannelOpsgenieArrayOutput {
	return o
}

func (o NotificationChannelOpsgenieArrayOutput) Index(i pulumi.IntInput) NotificationChannelOpsgenieOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationChannelOpsgenie {
		return vs[0].([]NotificationChannelOpsgenie)[vs[1].(int)]
	}).(NotificationChannelOpsgenieOutput)
}

type NotificationChannelOpsgenieMapOutput struct{ *pulumi.OutputState }

func (NotificationChannelOpsgenieMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NotificationChannelOpsgenie)(nil))
}

func (o NotificationChannelOpsgenieMapOutput) ToNotificationChannelOpsgenieMapOutput() NotificationChannelOpsgenieMapOutput {
	return o
}

func (o NotificationChannelOpsgenieMapOutput) ToNotificationChannelOpsgenieMapOutputWithContext(ctx context.Context) NotificationChannelOpsgenieMapOutput {
	return o
}

func (o NotificationChannelOpsgenieMapOutput) MapIndex(k pulumi.StringInput) NotificationChannelOpsgenieOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NotificationChannelOpsgenie {
		return vs[0].(map[string]NotificationChannelOpsgenie)[vs[1].(string)]
	}).(NotificationChannelOpsgenieOutput)
}

func init() {
	pulumi.RegisterOutputType(NotificationChannelOpsgenieOutput{})
	pulumi.RegisterOutputType(NotificationChannelOpsgeniePtrOutput{})
	pulumi.RegisterOutputType(NotificationChannelOpsgenieArrayOutput{})
	pulumi.RegisterOutputType(NotificationChannelOpsgenieMapOutput{})
}
