// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secure

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetNotificationChannel(ctx *pulumi.Context, args *GetNotificationChannelArgs, opts ...pulumi.InvokeOption) (*GetNotificationChannelResult, error) {
	var rv GetNotificationChannelResult
	err := ctx.Invoke("sysdig:Secure/getNotificationChannel:GetNotificationChannel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetNotificationChannel.
type GetNotificationChannelArgs struct {
	// The name of the Notification Channel.
	Name string `pulumi:"name"`
}

// A collection of values returned by GetNotificationChannel.
type GetNotificationChannelResult struct {
	// Pagerduty account.
	Account string `pulumi:"account"`
	// Key for the API.
	ApiKey string `pulumi:"apiKey"`
	// Channel name from this Slack.
	Channel string `pulumi:"channel"`
	// If false, the channel will not emit notifications.
	Enabled bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Send a new notification when the alert condition is
	// no longer triggered.
	NotifyWhenOk bool `pulumi:"notifyWhenOk"`
	// Send a new notification when the alert is manually
	// acknowledged by a user.
	NotifyWhenResolved bool `pulumi:"notifyWhenResolved"`
	// Comma-separated list of recipients that will receive
	// the message.
	Recipients string `pulumi:"recipients"`
	// Routing key for VictorOps.
	RoutingKey string `pulumi:"routingKey"`
	// Send an initial test notification to check
	// if the notification channel is working.
	SendTestNotification bool `pulumi:"sendTestNotification"`
	// Service Key for the Pagerduty account.
	ServiceKey string `pulumi:"serviceKey"`
	// Service name for the Pagerduty account.
	ServiceName string `pulumi:"serviceName"`
	// List of ARNs from the SNS topics.
	Topics string `pulumi:"topics"`
	// Will be one of the following:  "EMAIL", "SNS", "OPSGENIE",
	// "VICTOROPS", "WEBHOOK", "SLACK", "PAGER_DUTY".
	Type string `pulumi:"type"`
	// URL of the Slack.
	Url     string `pulumi:"url"`
	Version int    `pulumi:"version"`
}

func GetNotificationChannelOutput(ctx *pulumi.Context, args GetNotificationChannelOutputArgs, opts ...pulumi.InvokeOption) GetNotificationChannelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNotificationChannelResult, error) {
			args := v.(GetNotificationChannelArgs)
			r, err := GetNotificationChannel(ctx, &args, opts...)
			return *r, err
		}).(GetNotificationChannelResultOutput)
}

// A collection of arguments for invoking GetNotificationChannel.
type GetNotificationChannelOutputArgs struct {
	// The name of the Notification Channel.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetNotificationChannelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNotificationChannelArgs)(nil)).Elem()
}

// A collection of values returned by GetNotificationChannel.
type GetNotificationChannelResultOutput struct{ *pulumi.OutputState }

func (GetNotificationChannelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNotificationChannelResult)(nil)).Elem()
}

func (o GetNotificationChannelResultOutput) ToGetNotificationChannelResultOutput() GetNotificationChannelResultOutput {
	return o
}

func (o GetNotificationChannelResultOutput) ToGetNotificationChannelResultOutputWithContext(ctx context.Context) GetNotificationChannelResultOutput {
	return o
}

// Pagerduty account.
func (o GetNotificationChannelResultOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) string { return v.Account }).(pulumi.StringOutput)
}

// Key for the API.
func (o GetNotificationChannelResultOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) string { return v.ApiKey }).(pulumi.StringOutput)
}

// Channel name from this Slack.
func (o GetNotificationChannelResultOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) string { return v.Channel }).(pulumi.StringOutput)
}

// If false, the channel will not emit notifications.
func (o GetNotificationChannelResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNotificationChannelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNotificationChannelResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) string { return v.Name }).(pulumi.StringOutput)
}

// Send a new notification when the alert condition is
// no longer triggered.
func (o GetNotificationChannelResultOutput) NotifyWhenOk() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) bool { return v.NotifyWhenOk }).(pulumi.BoolOutput)
}

// Send a new notification when the alert is manually
// acknowledged by a user.
func (o GetNotificationChannelResultOutput) NotifyWhenResolved() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) bool { return v.NotifyWhenResolved }).(pulumi.BoolOutput)
}

// Comma-separated list of recipients that will receive
// the message.
func (o GetNotificationChannelResultOutput) Recipients() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) string { return v.Recipients }).(pulumi.StringOutput)
}

// Routing key for VictorOps.
func (o GetNotificationChannelResultOutput) RoutingKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) string { return v.RoutingKey }).(pulumi.StringOutput)
}

// Send an initial test notification to check
// if the notification channel is working.
func (o GetNotificationChannelResultOutput) SendTestNotification() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) bool { return v.SendTestNotification }).(pulumi.BoolOutput)
}

// Service Key for the Pagerduty account.
func (o GetNotificationChannelResultOutput) ServiceKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) string { return v.ServiceKey }).(pulumi.StringOutput)
}

// Service name for the Pagerduty account.
func (o GetNotificationChannelResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

// List of ARNs from the SNS topics.
func (o GetNotificationChannelResultOutput) Topics() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) string { return v.Topics }).(pulumi.StringOutput)
}

// Will be one of the following:  "EMAIL", "SNS", "OPSGENIE",
// "VICTOROPS", "WEBHOOK", "SLACK", "PAGER_DUTY".
func (o GetNotificationChannelResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) string { return v.Type }).(pulumi.StringOutput)
}

// URL of the Slack.
func (o GetNotificationChannelResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) string { return v.Url }).(pulumi.StringOutput)
}

func (o GetNotificationChannelResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v GetNotificationChannelResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNotificationChannelResultOutput{})
}
