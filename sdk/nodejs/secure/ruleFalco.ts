// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

export class RuleFalco extends pulumi.CustomResource {
    /**
     * Get an existing RuleFalco resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleFalcoState, opts?: pulumi.CustomResourceOptions): RuleFalco {
        return new RuleFalco(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sysdig:Secure/ruleFalco:RuleFalco';

    /**
     * Returns true if the given object is an instance of RuleFalco.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleFalco {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleFalco.__pulumiType;
    }

    public readonly append!: pulumi.Output<boolean | undefined>;
    public readonly condition!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly exceptions!: pulumi.Output<outputs.Secure.RuleFalcoException[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly output!: pulumi.Output<string | undefined>;
    public readonly priority!: pulumi.Output<string | undefined>;
    public readonly source!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a RuleFalco resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleFalcoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleFalcoArgs | RuleFalcoState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleFalcoState | undefined;
            inputs["append"] = state ? state.append : undefined;
            inputs["condition"] = state ? state.condition : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["exceptions"] = state ? state.exceptions : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["output"] = state ? state.output : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["source"] = state ? state.source : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as RuleFalcoArgs | undefined;
            if ((!args || args.condition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'condition'");
            }
            inputs["append"] = args ? args.append : undefined;
            inputs["condition"] = args ? args.condition : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["exceptions"] = args ? args.exceptions : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["output"] = args ? args.output : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["source"] = args ? args.source : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(RuleFalco.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RuleFalco resources.
 */
export interface RuleFalcoState {
    append?: pulumi.Input<boolean>;
    condition?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    exceptions?: pulumi.Input<pulumi.Input<inputs.Secure.RuleFalcoException>[]>;
    name?: pulumi.Input<string>;
    output?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RuleFalco resource.
 */
export interface RuleFalcoArgs {
    append?: pulumi.Input<boolean>;
    condition: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    exceptions?: pulumi.Input<pulumi.Input<inputs.Secure.RuleFalcoException>[]>;
    name?: pulumi.Input<string>;
    output?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
