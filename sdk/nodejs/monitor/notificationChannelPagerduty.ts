// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class NotificationChannelPagerduty extends pulumi.CustomResource {
    /**
     * Get an existing NotificationChannelPagerduty resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationChannelPagerdutyState, opts?: pulumi.CustomResourceOptions): NotificationChannelPagerduty {
        return new NotificationChannelPagerduty(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sysdig:Monitor/notificationChannelPagerduty:NotificationChannelPagerduty';

    /**
     * Returns true if the given object is an instance of NotificationChannelPagerduty.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationChannelPagerduty {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationChannelPagerduty.__pulumiType;
    }

    public readonly account!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notifyWhenOk!: pulumi.Output<boolean | undefined>;
    public readonly notifyWhenResolved!: pulumi.Output<boolean | undefined>;
    public readonly sendTestNotification!: pulumi.Output<boolean | undefined>;
    public readonly serviceKey!: pulumi.Output<string>;
    public readonly serviceName!: pulumi.Output<string>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a NotificationChannelPagerduty resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationChannelPagerdutyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationChannelPagerdutyArgs | NotificationChannelPagerdutyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationChannelPagerdutyState | undefined;
            inputs["account"] = state ? state.account : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notifyWhenOk"] = state ? state.notifyWhenOk : undefined;
            inputs["notifyWhenResolved"] = state ? state.notifyWhenResolved : undefined;
            inputs["sendTestNotification"] = state ? state.sendTestNotification : undefined;
            inputs["serviceKey"] = state ? state.serviceKey : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as NotificationChannelPagerdutyArgs | undefined;
            if ((!args || args.account === undefined) && !opts.urn) {
                throw new Error("Missing required property 'account'");
            }
            if ((!args || args.serviceKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceKey'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            inputs["account"] = args ? args.account : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notifyWhenOk"] = args ? args.notifyWhenOk : undefined;
            inputs["notifyWhenResolved"] = args ? args.notifyWhenResolved : undefined;
            inputs["sendTestNotification"] = args ? args.sendTestNotification : undefined;
            inputs["serviceKey"] = args ? args.serviceKey : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(NotificationChannelPagerduty.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotificationChannelPagerduty resources.
 */
export interface NotificationChannelPagerdutyState {
    account?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    notifyWhenOk?: pulumi.Input<boolean>;
    notifyWhenResolved?: pulumi.Input<boolean>;
    sendTestNotification?: pulumi.Input<boolean>;
    serviceKey?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a NotificationChannelPagerduty resource.
 */
export interface NotificationChannelPagerdutyArgs {
    account: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    notifyWhenOk?: pulumi.Input<boolean>;
    notifyWhenResolved?: pulumi.Input<boolean>;
    sendTestNotification?: pulumi.Input<boolean>;
    serviceKey: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
}
