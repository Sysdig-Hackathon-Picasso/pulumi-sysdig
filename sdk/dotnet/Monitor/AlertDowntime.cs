// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sysdig.Monitor
{
    /// <summary>
    /// ## Import
    /// 
    /// Downtime Monitor alerts can be imported using the alert ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import sysdig:Monitor/alertDowntime:AlertDowntime example 12345
    /// ```
    /// </summary>
    [SysdigResourceType("sysdig:Monitor/alertDowntime:AlertDowntime")]
    public partial class AlertDowntime : Pulumi.CustomResource
    {
        /// <summary>
        /// Enables the creation of a capture file of the syscalls during the event.
        /// </summary>
        [Output("capture")]
        public Output<Outputs.AlertDowntimeCapture?> Capture { get; private set; } = null!;

        /// <summary>
        /// Allows to define a custom notification title, prepend and append text.
        /// </summary>
        [Output("customNotification")]
        public Output<Outputs.AlertDowntimeCustomNotification?> CustomNotification { get; private set; } = null!;

        /// <summary>
        /// The description of Monitor alert.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Boolean that defines if the alert is enabled or not. Defaults to true.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// List of metrics to monitor downtime and alert on. Example: `["kubernetes.namespace.name"]` to detect namespace removal or `["host.hostName"]` to detect host downtime.
        /// </summary>
        [Output("entitiesToMonitors")]
        public Output<ImmutableArray<string>> EntitiesToMonitors { get; private set; } = null!;

        /// <summary>
        /// The name of the Monitor alert. It must be unique.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of notification channel IDs where an alert must be sent to once fired.
        /// </summary>
        [Output("notificationChannels")]
        public Output<ImmutableArray<int>> NotificationChannels { get; private set; } = null!;

        /// <summary>
        /// Number of minutes for the alert to re-notify until the status is solved.
        /// </summary>
        [Output("renotificationMinutes")]
        public Output<int?> RenotificationMinutes { get; private set; } = null!;

        /// <summary>
        /// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// Severity of the Monitor alert. It must be a value between 0 and 7,
        /// with 0 being the most critical and 7 the less critical. Defaults to 4.
        /// </summary>
        [Output("severity")]
        public Output<int?> Severity { get; private set; } = null!;

        /// <summary>
        /// Team ID that owns the alert.
        /// </summary>
        [Output("team")]
        public Output<int> Team { get; private set; } = null!;

        /// <summary>
        /// Threshold of time for the status to stabilize until the alert is fired.
        /// </summary>
        [Output("triggerAfterMinutes")]
        public Output<int> TriggerAfterMinutes { get; private set; } = null!;

        /// <summary>
        /// Below of this percentage of downtime the alert will be triggered. Defaults to 100.
        /// </summary>
        [Output("triggerAfterPct")]
        public Output<int?> TriggerAfterPct { get; private set; } = null!;

        /// <summary>
        /// Current version of the resource in Sysdig Monitor.
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a AlertDowntime resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AlertDowntime(string name, AlertDowntimeArgs args, CustomResourceOptions? options = null)
            : base("sysdig:Monitor/alertDowntime:AlertDowntime", name, args ?? new AlertDowntimeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AlertDowntime(string name, Input<string> id, AlertDowntimeState? state = null, CustomResourceOptions? options = null)
            : base("sysdig:Monitor/alertDowntime:AlertDowntime", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AlertDowntime resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AlertDowntime Get(string name, Input<string> id, AlertDowntimeState? state = null, CustomResourceOptions? options = null)
        {
            return new AlertDowntime(name, id, state, options);
        }
    }

    public sealed class AlertDowntimeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enables the creation of a capture file of the syscalls during the event.
        /// </summary>
        [Input("capture")]
        public Input<Inputs.AlertDowntimeCaptureArgs>? Capture { get; set; }

        /// <summary>
        /// Allows to define a custom notification title, prepend and append text.
        /// </summary>
        [Input("customNotification")]
        public Input<Inputs.AlertDowntimeCustomNotificationArgs>? CustomNotification { get; set; }

        /// <summary>
        /// The description of Monitor alert.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Boolean that defines if the alert is enabled or not. Defaults to true.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("entitiesToMonitors", required: true)]
        private InputList<string>? _entitiesToMonitors;

        /// <summary>
        /// List of metrics to monitor downtime and alert on. Example: `["kubernetes.namespace.name"]` to detect namespace removal or `["host.hostName"]` to detect host downtime.
        /// </summary>
        public InputList<string> EntitiesToMonitors
        {
            get => _entitiesToMonitors ?? (_entitiesToMonitors = new InputList<string>());
            set => _entitiesToMonitors = value;
        }

        /// <summary>
        /// The name of the Monitor alert. It must be unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationChannels")]
        private InputList<int>? _notificationChannels;

        /// <summary>
        /// List of notification channel IDs where an alert must be sent to once fired.
        /// </summary>
        public InputList<int> NotificationChannels
        {
            get => _notificationChannels ?? (_notificationChannels = new InputList<int>());
            set => _notificationChannels = value;
        }

        /// <summary>
        /// Number of minutes for the alert to re-notify until the status is solved.
        /// </summary>
        [Input("renotificationMinutes")]
        public Input<int>? RenotificationMinutes { get; set; }

        /// <summary>
        /// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Severity of the Monitor alert. It must be a value between 0 and 7,
        /// with 0 being the most critical and 7 the less critical. Defaults to 4.
        /// </summary>
        [Input("severity")]
        public Input<int>? Severity { get; set; }

        /// <summary>
        /// Threshold of time for the status to stabilize until the alert is fired.
        /// </summary>
        [Input("triggerAfterMinutes", required: true)]
        public Input<int> TriggerAfterMinutes { get; set; } = null!;

        /// <summary>
        /// Below of this percentage of downtime the alert will be triggered. Defaults to 100.
        /// </summary>
        [Input("triggerAfterPct")]
        public Input<int>? TriggerAfterPct { get; set; }

        public AlertDowntimeArgs()
        {
        }
    }

    public sealed class AlertDowntimeState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enables the creation of a capture file of the syscalls during the event.
        /// </summary>
        [Input("capture")]
        public Input<Inputs.AlertDowntimeCaptureGetArgs>? Capture { get; set; }

        /// <summary>
        /// Allows to define a custom notification title, prepend and append text.
        /// </summary>
        [Input("customNotification")]
        public Input<Inputs.AlertDowntimeCustomNotificationGetArgs>? CustomNotification { get; set; }

        /// <summary>
        /// The description of Monitor alert.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Boolean that defines if the alert is enabled or not. Defaults to true.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("entitiesToMonitors")]
        private InputList<string>? _entitiesToMonitors;

        /// <summary>
        /// List of metrics to monitor downtime and alert on. Example: `["kubernetes.namespace.name"]` to detect namespace removal or `["host.hostName"]` to detect host downtime.
        /// </summary>
        public InputList<string> EntitiesToMonitors
        {
            get => _entitiesToMonitors ?? (_entitiesToMonitors = new InputList<string>());
            set => _entitiesToMonitors = value;
        }

        /// <summary>
        /// The name of the Monitor alert. It must be unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationChannels")]
        private InputList<int>? _notificationChannels;

        /// <summary>
        /// List of notification channel IDs where an alert must be sent to once fired.
        /// </summary>
        public InputList<int> NotificationChannels
        {
            get => _notificationChannels ?? (_notificationChannels = new InputList<int>());
            set => _notificationChannels = value;
        }

        /// <summary>
        /// Number of minutes for the alert to re-notify until the status is solved.
        /// </summary>
        [Input("renotificationMinutes")]
        public Input<int>? RenotificationMinutes { get; set; }

        /// <summary>
        /// Part of the infrastructure where the alert is valid. Defaults to the entire infrastructure.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Severity of the Monitor alert. It must be a value between 0 and 7,
        /// with 0 being the most critical and 7 the less critical. Defaults to 4.
        /// </summary>
        [Input("severity")]
        public Input<int>? Severity { get; set; }

        /// <summary>
        /// Team ID that owns the alert.
        /// </summary>
        [Input("team")]
        public Input<int>? Team { get; set; }

        /// <summary>
        /// Threshold of time for the status to stabilize until the alert is fired.
        /// </summary>
        [Input("triggerAfterMinutes")]
        public Input<int>? TriggerAfterMinutes { get; set; }

        /// <summary>
        /// Below of this percentage of downtime the alert will be triggered. Defaults to 100.
        /// </summary>
        [Input("triggerAfterPct")]
        public Input<int>? TriggerAfterPct { get; set; }

        /// <summary>
        /// Current version of the resource in Sysdig Monitor.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public AlertDowntimeState()
        {
        }
    }
}
