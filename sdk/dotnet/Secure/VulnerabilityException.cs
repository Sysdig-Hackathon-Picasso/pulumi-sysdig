// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sysdig.Secure
{
    /// <summary>
    /// ## Import
    /// 
    /// Vulnerability exception can be imported using the ID of the exception list, and the ID of the exception separated by `/`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import sysdig:Secure/vulnerabilityException:VulnerabilityException example vulnexception_1iTWe5s3qFivOW4jcj5X8nnG3hn/vulnexceptionitem_1n1HL7la7LyJFAzr0DEc0hVbnFU
    /// ```
    /// </summary>
    [SysdigResourceType("sysdig:Secure/vulnerabilityException:VulnerabilityException")]
    public partial class VulnerabilityException : Pulumi.CustomResource
    {
        /// <summary>
        /// The CVE ID to make an exception to.
        /// </summary>
        [Output("cve")]
        public Output<string> Cve { get; private set; } = null!;

        /// <summary>
        /// If this is false, the CVE exception will be ignored, use this if you don't want to delete
        /// the exception. Default: true.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The expiration date of the exception, useful if you want to ignore
        /// some vulnerability only for a period of time. The time specified is Unix timestamp,
        /// and must reference a date at 00:00:00 AM. See the example where the referenced date
        /// is the 1st of January 2025. Default: 0 (no expiration date).
        /// </summary>
        [Output("expirationDate")]
        public Output<int?> ExpirationDate { get; private set; } = null!;

        /// <summary>
        /// The ID of the Vulnerability exception list to assign this exception to.
        /// </summary>
        [Output("listId")]
        public Output<string> ListId { get; private set; } = null!;

        /// <summary>
        /// Some context of why this vulnerability is being ignored.
        /// </summary>
        [Output("notes")]
        public Output<string?> Notes { get; private set; } = null!;


        /// <summary>
        /// Create a VulnerabilityException resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VulnerabilityException(string name, VulnerabilityExceptionArgs args, CustomResourceOptions? options = null)
            : base("sysdig:Secure/vulnerabilityException:VulnerabilityException", name, args ?? new VulnerabilityExceptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VulnerabilityException(string name, Input<string> id, VulnerabilityExceptionState? state = null, CustomResourceOptions? options = null)
            : base("sysdig:Secure/vulnerabilityException:VulnerabilityException", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VulnerabilityException resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VulnerabilityException Get(string name, Input<string> id, VulnerabilityExceptionState? state = null, CustomResourceOptions? options = null)
        {
            return new VulnerabilityException(name, id, state, options);
        }
    }

    public sealed class VulnerabilityExceptionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CVE ID to make an exception to.
        /// </summary>
        [Input("cve", required: true)]
        public Input<string> Cve { get; set; } = null!;

        /// <summary>
        /// If this is false, the CVE exception will be ignored, use this if you don't want to delete
        /// the exception. Default: true.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The expiration date of the exception, useful if you want to ignore
        /// some vulnerability only for a period of time. The time specified is Unix timestamp,
        /// and must reference a date at 00:00:00 AM. See the example where the referenced date
        /// is the 1st of January 2025. Default: 0 (no expiration date).
        /// </summary>
        [Input("expirationDate")]
        public Input<int>? ExpirationDate { get; set; }

        /// <summary>
        /// The ID of the Vulnerability exception list to assign this exception to.
        /// </summary>
        [Input("listId", required: true)]
        public Input<string> ListId { get; set; } = null!;

        /// <summary>
        /// Some context of why this vulnerability is being ignored.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        public VulnerabilityExceptionArgs()
        {
        }
    }

    public sealed class VulnerabilityExceptionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CVE ID to make an exception to.
        /// </summary>
        [Input("cve")]
        public Input<string>? Cve { get; set; }

        /// <summary>
        /// If this is false, the CVE exception will be ignored, use this if you don't want to delete
        /// the exception. Default: true.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The expiration date of the exception, useful if you want to ignore
        /// some vulnerability only for a period of time. The time specified is Unix timestamp,
        /// and must reference a date at 00:00:00 AM. See the example where the referenced date
        /// is the 1st of January 2025. Default: 0 (no expiration date).
        /// </summary>
        [Input("expirationDate")]
        public Input<int>? ExpirationDate { get; set; }

        /// <summary>
        /// The ID of the Vulnerability exception list to assign this exception to.
        /// </summary>
        [Input("listId")]
        public Input<string>? ListId { get; set; }

        /// <summary>
        /// Some context of why this vulnerability is being ignored.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        public VulnerabilityExceptionState()
        {
        }
    }
}
