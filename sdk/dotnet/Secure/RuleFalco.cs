// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sysdig.Secure
{
    [SysdigResourceType("sysdig:Secure/ruleFalco:RuleFalco")]
    public partial class RuleFalco : Pulumi.CustomResource
    {
        [Output("append")]
        public Output<bool?> Append { get; private set; } = null!;

        [Output("condition")]
        public Output<string> Condition { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("exceptions")]
        public Output<ImmutableArray<Outputs.RuleFalcoException>> Exceptions { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("output")]
        public Output<string?> Output { get; private set; } = null!;

        [Output("priority")]
        public Output<string?> Priority { get; private set; } = null!;

        [Output("source")]
        public Output<string?> Source { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a RuleFalco resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleFalco(string name, RuleFalcoArgs args, CustomResourceOptions? options = null)
            : base("sysdig:Secure/ruleFalco:RuleFalco", name, args ?? new RuleFalcoArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleFalco(string name, Input<string> id, RuleFalcoState? state = null, CustomResourceOptions? options = null)
            : base("sysdig:Secure/ruleFalco:RuleFalco", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleFalco resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleFalco Get(string name, Input<string> id, RuleFalcoState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleFalco(name, id, state, options);
        }
    }

    public sealed class RuleFalcoArgs : Pulumi.ResourceArgs
    {
        [Input("append")]
        public Input<bool>? Append { get; set; }

        [Input("condition", required: true)]
        public Input<string> Condition { get; set; } = null!;

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("exceptions")]
        private InputList<Inputs.RuleFalcoExceptionArgs>? _exceptions;
        public InputList<Inputs.RuleFalcoExceptionArgs> Exceptions
        {
            get => _exceptions ?? (_exceptions = new InputList<Inputs.RuleFalcoExceptionArgs>());
            set => _exceptions = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("output")]
        public Input<string>? Output { get; set; }

        [Input("priority")]
        public Input<string>? Priority { get; set; }

        [Input("source")]
        public Input<string>? Source { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public RuleFalcoArgs()
        {
        }
    }

    public sealed class RuleFalcoState : Pulumi.ResourceArgs
    {
        [Input("append")]
        public Input<bool>? Append { get; set; }

        [Input("condition")]
        public Input<string>? Condition { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("exceptions")]
        private InputList<Inputs.RuleFalcoExceptionGetArgs>? _exceptions;
        public InputList<Inputs.RuleFalcoExceptionGetArgs> Exceptions
        {
            get => _exceptions ?? (_exceptions = new InputList<Inputs.RuleFalcoExceptionGetArgs>());
            set => _exceptions = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("output")]
        public Input<string>? Output { get; set; }

        [Input("priority")]
        public Input<string>? Priority { get; set; }

        [Input("source")]
        public Input<string>? Source { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("version")]
        public Input<int>? Version { get; set; }

        public RuleFalcoState()
        {
        }
    }
}
