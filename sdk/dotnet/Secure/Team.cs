// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sysdig.Secure
{
    /// <summary>
    /// ## Import
    /// 
    /// Secure Teams can be imported using the ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import sysdig:Secure/team:Team example 12345
    /// ```
    /// </summary>
    [SysdigResourceType("sysdig:Secure/team:Team")]
    public partial class Team : Pulumi.CustomResource
    {
        [Output("defaultTeam")]
        public Output<bool?> DefaultTeam { get; private set; } = null!;

        /// <summary>
        /// A description of the team.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// If the team can only see some resources, 
        /// write down a filter of such resources.
        /// </summary>
        [Output("filter")]
        public Output<string?> Filter { get; private set; } = null!;

        /// <summary>
        /// The name of the Secure Team. It must be unique and must not exist in Monitor.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Scope for the team. Default: "container".
        /// </summary>
        [Output("scopeBy")]
        public Output<string?> ScopeBy { get; private set; } = null!;

        /// <summary>
        /// Colour of the team. Default: "#73A1F7".
        /// </summary>
        [Output("theme")]
        public Output<string?> Theme { get; private set; } = null!;

        /// <summary>
        /// Defines if the team is able to create Sysdig Capture files. 
        /// Default: true.
        /// </summary>
        [Output("useSysdigCapture")]
        public Output<bool?> UseSysdigCapture { get; private set; } = null!;

        [Output("userRoles")]
        public Output<ImmutableArray<Outputs.TeamUserRole>> UserRoles { get; private set; } = null!;

        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Team resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Team(string name, TeamArgs? args = null, CustomResourceOptions? options = null)
            : base("sysdig:Secure/team:Team", name, args ?? new TeamArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Team(string name, Input<string> id, TeamState? state = null, CustomResourceOptions? options = null)
            : base("sysdig:Secure/team:Team", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Team resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Team Get(string name, Input<string> id, TeamState? state = null, CustomResourceOptions? options = null)
        {
            return new Team(name, id, state, options);
        }
    }

    public sealed class TeamArgs : Pulumi.ResourceArgs
    {
        [Input("defaultTeam")]
        public Input<bool>? DefaultTeam { get; set; }

        /// <summary>
        /// A description of the team.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If the team can only see some resources, 
        /// write down a filter of such resources.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// The name of the Secure Team. It must be unique and must not exist in Monitor.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Scope for the team. Default: "container".
        /// </summary>
        [Input("scopeBy")]
        public Input<string>? ScopeBy { get; set; }

        /// <summary>
        /// Colour of the team. Default: "#73A1F7".
        /// </summary>
        [Input("theme")]
        public Input<string>? Theme { get; set; }

        /// <summary>
        /// Defines if the team is able to create Sysdig Capture files. 
        /// Default: true.
        /// </summary>
        [Input("useSysdigCapture")]
        public Input<bool>? UseSysdigCapture { get; set; }

        [Input("userRoles")]
        private InputList<Inputs.TeamUserRoleArgs>? _userRoles;
        public InputList<Inputs.TeamUserRoleArgs> UserRoles
        {
            get => _userRoles ?? (_userRoles = new InputList<Inputs.TeamUserRoleArgs>());
            set => _userRoles = value;
        }

        public TeamArgs()
        {
        }
    }

    public sealed class TeamState : Pulumi.ResourceArgs
    {
        [Input("defaultTeam")]
        public Input<bool>? DefaultTeam { get; set; }

        /// <summary>
        /// A description of the team.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If the team can only see some resources, 
        /// write down a filter of such resources.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// The name of the Secure Team. It must be unique and must not exist in Monitor.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Scope for the team. Default: "container".
        /// </summary>
        [Input("scopeBy")]
        public Input<string>? ScopeBy { get; set; }

        /// <summary>
        /// Colour of the team. Default: "#73A1F7".
        /// </summary>
        [Input("theme")]
        public Input<string>? Theme { get; set; }

        /// <summary>
        /// Defines if the team is able to create Sysdig Capture files. 
        /// Default: true.
        /// </summary>
        [Input("useSysdigCapture")]
        public Input<bool>? UseSysdigCapture { get; set; }

        [Input("userRoles")]
        private InputList<Inputs.TeamUserRoleGetArgs>? _userRoles;
        public InputList<Inputs.TeamUserRoleGetArgs> UserRoles
        {
            get => _userRoles ?? (_userRoles = new InputList<Inputs.TeamUserRoleGetArgs>());
            set => _userRoles = value;
        }

        [Input("version")]
        public Input<int>? Version { get; set; }

        public TeamState()
        {
        }
    }
}
